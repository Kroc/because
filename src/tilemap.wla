; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; since we cannot modify VRAM during the display period,
; changes are queued up and then applied during vblank
;
.RAMSECTION     "tile_queue"                    RETURNORG
        ;-----------------------------------------------------------------------
        queue_index     BYTE            ; current stack-level of the queue
        tile_queue      DSB 126
.ENDS

.RAMSECTION     "buffers"       ALIGN 256       RETURNORG
        ;-----------------------------------------------------------------------
        front_buffer    DSB 32*32
        back_buffer     DSB 32*32
.ENDS


; include the tile graphics and map the various pieces of the card graphics
; to some constants so that we don't have to tweak tile numbers throughout
; the code-base. we want this aligned to one-tile (16-bytes) for some
; tile-copying micro-optimisations
;
.SECTION        "tiles_cards"   ALIGN 16        RETURNORG
;///////////////////////////////////////////////////////////////////////////////

tiles_main:
;===============================================================================
.INCBIN         "build/tiles_even.2bpp" FSIZE tiles_main__size

; 3x4 cards:
;===============================================================================
; foundation:
;-------------------------------------------------------------------------------
; a foundation is a blank space on the playfield where cards are
; "played off", into their final destination
;
.DEF    TILE3X4_FNDT_1X1        $80+$25 ; foundation, top-left
.DEF    TILE3X4_FNDT_1X2        $80+$26 ; foundation, top-centre
.DEF    TILE3X4_FNDT_1X3        $80+$27 ; foundation, top-right
.DEF    TILE3X4_FNDT_2X1        $80+$35 ; foundation, upper-middle left
.DEF    TILE3X4_FNDT_2X2        $80+$00 ; foundation, upper-middle centre
.DEF    TILE3X4_FNDT_2X3        $80+$37 ; foundation, upper-middle right
.DEF    TILE3X4_FNDT_3X1        $80+$45 ; foundation, lower-middle left
.DEF    TILE3X4_FNDT_3X2        $80+$00 ; foundation, lower-middle centre
.DEF    TILE3X4_FNDT_3X3        $80+$47 ; foundation, lower-middle right
.DEF    TILE3X4_FNDT_4X1        $80+$55 ; foundation, bottom-left
.DEF    TILE3X4_FNDT_4X2        $80+$56 ; foundation, bottom-centre
.DEF    TILE3X4_FNDT_4X3        $80+$57 ; foundation, bottom-right

; deck:
;-------------------------------------------------------------------------------
; a deck is a pile of face-down cards
;
.DEF    TILE3X4_DECK_0X1        $80+$22 ; deck, top-left
.DEF    TILE3X4_DECK_0X2        $80+$23 ; deck, top-centre
.DEF    TILE3X4_DECK_0X3        $80+$24 ; deck, top-right

; the middle three rows of the deck repeat
;
.DEF    TILE3X4_DECK_1X1        $80+$42 ; deck, middle-left (row 2)
.DEF    TILE3X4_DECK_1X2        $80+$43 ; deck, middle-centre (row 2)
.DEF    TILE3X4_DECK_1X3        $80+$44 ; deck, middle-right (row 2)
.DEF    TILE3X4_DECK_2X1        $80+$42 ; deck, middle-left (row 3)
.DEF    TILE3X4_DECK_2X2        $80+$43 ; deck, middle-centre (row 3)
.DEF    TILE3X4_DECK_2X3        $80+$44 ; deck, middle-right (row 3)
.DEF    TILE3X4_DECK_3X1        $80+$42 ; deck, bottom-left (row 4)
.DEF    TILE3X4_DECK_3X2        $80+$43 ; deck, bottom-centre (row 4)
.DEF    TILE3X4_DECK_3X3        $80+$44 ; deck, bottom-right (row 4)

; bottom-row of the deck
.DEF    TILE3X4_DECK_4X1        $80+$62 ; deck, pile-left
.DEF    TILE3X4_DECK_4X2        $80+$63 ; deck, pile-centre
.DEF    TILE3X4_DECK_4X3        $80+$64 ; deck, pile-right

; back:
;-------------------------------------------------------------------------------
; a card, face-down:
;
.DEF    TILE3X4_BACK_1X1        $80+$32 ; back, top-left
.DEF    TILE3X4_BACK_1X2        $80+$33 ; back, top-centre
.DEF    TILE3X4_BACK_1X3        $80+$34 ; back, top-right
.DEF    TILE3X4_BACK_2X1        $80+$42 ; back, middle-left (row 2)
.DEF    TILE3X4_BACK_2X2        $80+$43 ; back, middle-centre (row 2)
.DEF    TILE3X4_BACK_2X3        $80+$44 ; back, middle-right (row 2)
.DEF    TILE3X4_BACK_3X1        $80+$42 ; back, middle-left (row 3)
.DEF    TILE3X4_BACK_3X2        $80+$43 ; back, middle-centre (row 3)
.DEF    TILE3X4_BACK_3X3        $80+$44 ; back, middle-right (row 3)
.DEF    TILE3X4_BACK_4X1        $80+$52 ; back, bottom-left
.DEF    TILE3X4_BACK_4X2        $80+$53 ; back, bottom-centre
.DEF    TILE3X4_BACK_4X3        $80+$54 ; back, bottom-right

; face-up:
;-------------------------------------------------------------------------------
; the top-left corner of a face-up card has the
; ordinal (number) of the card, Ace through King:
;
.DEF    TILE3X4_CARD_1X1        $00
.DEF    TILE3X4_CARD_1X1_A      $00     ; Ace
.DEF    TILE3X4_CARD_1X1_2      $01     ; Two
.DEF    TILE3X4_CARD_1X1_3      $02     ; Three
.DEF    TILE3X4_CARD_1X1_4      $03     ; Four
.DEF    TILE3X4_CARD_1X1_5      $04     ; Five
.DEF    TILE3X4_CARD_1X1_6      $05     ; Six
.DEF    TILE3X4_CARD_1X1_7      $06     ; Seven
.DEF    TILE3X4_CARD_1X1_8      $07     ; Eight
.DEF    TILE3X4_CARD_1X1_9      $08     ; Nine
.DEF    TILE3X4_CARD_1X1_10     $09     ; Ten
.DEF    TILE3X4_CARD_1X1_J      $0a     ; Jack
.DEF    TILE3X4_CARD_1X1_Q      $0b     ; Queen
.DEF    TILE3X4_CARD_1X1_K      $0c     ; King

; the top-centre of a face-up card is blank
.DEF    TILE3X4_CARD_1X2        $4e

; the top-right of a face-up card has the suit:
;
.DEF    TILE3X4_CARD_1X3        $40
.DEF    TILE3X4_CARD_1X3_SPD    $40     ; Spades
.DEF    TILE3X4_CARD_1X3_CLB    $41     ; Clubs
.DEF    TILE3X4_CARD_1X3_HRT    $42     ; Hearts
.DEF    TILE3X4_CARD_1X3_DMD    $43     ; Diamonds

; the left, centre and right of the middle portion
; of the card (two-rows) is blank:
;
.DEF    TILE3X4_CARD_2X1        $5d
.DEF    TILE3X4_CARD_2X2        $80+$01 ; (re-uses space from font)
.DEF    TILE3X4_CARD_2X3        $5f
.DEF    TILE3X4_CARD_3X1        $5d
.DEF    TILE3X4_CARD_3X2        $80+$01 ; (re-uses space from font)
.DEF    TILE3X4_CARD_3X3        $5f

; the bottom-left of a face-up card has the suit:
;
.DEF    TILE3X4_CARD_4X1        $50
.DEF    TILE3X4_CARD_4X1_SPD    $50     ; Spades
.DEF    TILE3X4_CARD_4X1_CLB    $51     ; Clubs
.DEF    TILE3X4_CARD_4X1_HRT    $52     ; Hearts
.DEF    TILE3X4_CARD_4X1_DMD    $53     ; Diamonds

; the bottom-centre is blank
.DEF    TILE3X4_CARD_4X2        $6e

; the bottom-right of a face-up card has the ordinal:
;
.DEF    TILE3X4_CARD_4X3        $20
.DEF    TILE3X4_CARD_4X3_A      $20     ; Ace
.DEF    TILE3X4_CARD_4X3_2      $21     ; Two
.DEF    TILE3X4_CARD_4X3_3      $22     ; Three
.DEF    TILE3X4_CARD_4X3_4      $23     ; Four
.DEF    TILE3X4_CARD_4X3_5      $24     ; Five
.DEF    TILE3X4_CARD_4X3_6      $25     ; Six
.DEF    TILE3X4_CARD_4X3_7      $26     ; Seven
.DEF    TILE3X4_CARD_4X3_8      $27     ; Eight
.DEF    TILE3X4_CARD_4X3_9      $28     ; Nine
.DEF    TILE3X4_CARD_4X3_10     $29     ; Ten
.DEF    TILE3X4_CARD_4X3_J      $2a     ; Jack
.DEF    TILE3X4_CARD_4X3_Q      $2b     ; Queen
.DEF    TILE3X4_CARD_4X3_K      $2c     ; King

; card tilemaps:
;===============================================================================
tilemap_empty:
        ;-----------------------------------------------------------------------
        ; this is the dotted-outline used for showing an empty pile,
        ; such as the deck, hand, or foundation
        ;
@row1:  .byte   TILE3X4_FNDT_1X1, TILE3X4_FNDT_1X2, TILE3X4_FNDT_1X3
@row2:  .byte   TILE3X4_FNDT_2X1, TILE3X4_FNDT_2X2, TILE3X4_FNDT_2X3
@row3:  .byte   TILE3X4_FNDT_3X1, TILE3X4_FNDT_3X2, TILE3X4_FNDT_3X3
@row4:  .byte   TILE3X4_FNDT_4X1, TILE3X4_FNDT_4X2, TILE3X4_FNDT_4X3

tilemap_deck:
        ;-----------------------------------------------------------------------
        ; a full deck
        ;
@row0:  .byte   TILE3X4_DECK_0X1, TILE3X4_DECK_0X2, TILE3X4_DECK_0X3
@row1:  .byte   TILE3X4_DECK_1X1, TILE3X4_DECK_1X2, TILE3X4_DECK_1X3
@row2:  .byte   TILE3X4_DECK_2X1, TILE3X4_DECK_2X2, TILE3X4_DECK_2X3
@row3:  .byte   TILE3X4_DECK_3X1, TILE3X4_DECK_3X2, TILE3X4_DECK_3X3
@row4:  .byte   TILE3X4_DECK_4X1, TILE3X4_DECK_4X2, TILE3X4_DECK_4X3


tilemap_back:
        ;-----------------------------------------------------------------------
        ; the back of a card
        ;
@row1:  .byte   TILE3X4_BACK_1X1, TILE3X4_BACK_1X2, TILE3X4_BACK_1X3
@row2:  .byte   TILE3X4_BACK_2X1, TILE3X4_BACK_2X2, TILE3X4_BACK_2X3
@row3:  .byte   TILE3X4_BACK_3X1, TILE3X4_BACK_3X2, TILE3X4_BACK_3X3
@row4:  .byte   TILE3X4_BACK_4X1, TILE3X4_BACK_4X2, TILE3X4_BACK_4X3

;///////////////////////////////////////////////////////////////////////////////
.ENDS


init:
;===============================================================================
        ldh     A,      [<LCDC]
        or      LCDC.window_select      ; use $9C00 for the window-map
        or      LCDC.bg_display         ; turn background on
        ldh     [<LCDC],        A

        call    clearQueue              ; clear the tile update queue
        call    copyMainTileset         ; copy main tileset from ROM to VRAM

        call    playfield.clear         ; clear the playfield background
        call    menu.clear              ; clear and draw the menu

        call    refresh

        ; set palette:
        ld      A,      %11100100
        ld      [BGP],  A

        rst     rst_screenOn
        ret


clearQueue:
;===============================================================================
; empty the tile-update queue, used to defer VRAM changes to vblank:
;
;-------------------------------------------------------------------------------
        ; starting address of tile queue
        ld      C,      <tile_queue
        ld      HL,     queue_index
        ld      [HL],   C

        ld      B,      _sizeof_tile_queue+1
-       ldh     [C],    A               ; write 0 to queue
        inc     C                       ; move to next byte in queue
        dec     B                       ; one less byte to process
        jr      nz, -                   ; keep going?
        
        ret


copyMainTileset:
;===============================================================================
; copy the main tileset used throughout the game:
;
; TODO: check vblank/lcd-stat for safety on CGB, we can use DMA to do this
;-------------------------------------------------------------------------------
        ld      HL,     tiles_main      ; set source address
        ld      DE,     VRAM_TILES2     ; set destination VRAM position

        ; number of tiles to copy, 0-based
        ; (each tile is 16-bytes)
        ld      B,      (tiles_main__size / 16) - 1


copyTiles:
;===============================================================================
; copy a number of graphic tiles to VRAM:
;
; in:   HL      starting address of tiles
;       DE      VRAM destination, e.g. $8000
;       B       number of tiles to copy, 1-based
;               use "0" for 256 tiles
;
; TODO: on GBC we could do this using DMA?
;-------------------------------------------------------------------------------
.REPEAT 15
        ld      A,      [HL+]
        ld      [DE],   A
        inc     E   
.ENDR
        ld      A,      [HL+]
        ld      [DE],   A
        inc     DE
        
        dec     B
        jr      nz, copyTiles
        
        ret


getBufferAddr:
;===============================================================================
; given an X & Y co-ordinate, return an address in the front-buffer:
;
; in:   B       y-position (row) in the tile-map (32x32)
;       C       x-position (column) in the tile-map (32x32)
;
; out:  HL      address within the front-buffer                         
;       A, DE   (preserved)                                             
;       BC      (clobbered)                                             ;cycles
;-------------------------------------------------------------------------------
        ; we need to multiply Y (row) by 32                             ;   =24
        ld      H,      0               ; prepare HL,                   ;+ 8=32
        ld      L,      B               ; with row-number only          ;+ 4=36

        ; TODO: use a lookup table of rows (just 64 bytes!)
        ;       also, we could use SWAP to partially multiply by 4,
        ;       but this requires the A register which we need to preserve
        ;       <github.com/pret/pokecrystal/wiki/Optimizing-assembly-code>
        ;
        add     HL,     HL              ; x2                            ;+ 8=44
        add     HL,     HL              ; x4                            ;+ 8=52
        add     HL,     HL              ; x8                            ;+ 8=60
        add     HL,     HL              ; x16                           ;+ 8=68
        add     HL,     HL              ; x32                           ;+ 8=76

        ld      B,      0               ; prepare BC with column only   ;+ 8=84
        add     HL,     BC              ; add the column                ;+ 8=92
        ld      BC,     front_buffer    ; get front-buffer address      ;+12=104
        add     HL,     BC              ; finally, add our offset       ;+ 8=112

        ret                                                             ;+16=128


writeTiles_3wide_5rows:
;===============================================================================
        call    writeTiles_3wide

writeTiles_3wide_4rows:
;===============================================================================
        call    writeTiles_3wide

writeTiles_3wide_3rows:
;===============================================================================
        call    writeTiles_3wide

writeTiles_3wide_2rows:
;===============================================================================
        call    writeTiles_3wide

writeTiles_3wide_1row:
;===============================================================================
writeTiles_3wide:
;===============================================================================
; in:   DE      address with tiles to read from
;       HL      address to write to, where 3 tiles are written and then
;               the address is moved to the next row of the tilemap
;-------------------------------------------------------------------------------
        ld      BC,     29

        ld      A,      [DE]
        inc     DE
        ld      [HL+],  A
        ld      A,      [DE]
        inc     DE
        ld      [HL+],  A
        ld      A,      [DE]
        inc     DE
        ld      [HL+],  A
        rla                             ; preserve carry flag!
        add     HL,     BC
        rra                             ; restore carry flag!

        ret


refresh:
;===============================================================================
; forces a full update of the background tilemap:
;
; normally updates to the tilemap are done partially -- only the tiles that
; have changed between the front & back buffers are written during vblank
;
; a full update copies the current front buffer to the back buffer, then
; the full back buffer is copied to VRAM in one go. the screen cannot be
; on whilst this happens as writes to VRAM outside of vblank are ignored
;
; TODO: on GBC we can use DMA
;-------------------------------------------------------------------------------
        ; clear the update queue to prevent changes to VRAM during vblank
        call    clearQueue

        ; copy front buffer to back buffer:
        ld      HL,     front_buffer
        ld      DE,     back_buffer
        call    @copy

        ; copy back buffer to VRAM:
        ;
        ; on the GameBoy, VRAM is memory-mapped,
        ; though it is inaccessible outside of vblank
        ;
        ld      HL,     back_buffer
        ld      DE,     VRAM_MAP1

        ; copy 1'024 bytes:
        ;-----------------------------------------------------------------------
@copy:  ld      C,      0

-       ld      A,      [HL+]
        ld      [DE],   A
        inc     E
        ld      A,      [HL+]
        ld      [DE],   A
        inc     E
        ld      A,      [HL+]
        ld      [DE],   A
        inc     E
        ld      A,      [HL+]
        ld      [DE],   A
        inc     DE
        dec     C
        jr      nz, -

        ret


update:
;===============================================================================
; compares the differences between the front & back buffers and generates
; the list of VRAM changes (tile queue) to make during vblank
;
;-------------------------------------------------------------------------------
        ld      HL,     front_buffer
        ld      DE,     back_buffer
        ld      BC,     _sizeof_front_buffer+1

        ; (jump into the functional part of the loop)
        jr      @read
        
        ;-----------------------------------------------------------------------
@next:  dec     BC                      ; one less tile to process...
        ret     z                       ; all done? exit

        inc     DE                      ; move forward in the back-buffer
        inc     HL                      ; and keep the front-buffer in step 

        ; loop begins here...
        ;
@read:  ld      A,      [DE]            ; read tile from back-buffer
        cp      [HL]                    ; compare with front-buffer
        jr      z, @next                ; if they're the same, keep scanning

        ; there's a difference!
        ; queue the tile change:
        ;
        push    BC                      ; (backup current index)
        push    HL                      ; (backup front buffer position)

        push    AF                      ; backup the tile
        
        ; calculate the VRAM address from our current index
        ; in the front & back buffers...
        ld      HL,     VRAM_MAP1
        add     HL,     BC              ; (only HL can do 16-bit adds)
        push    HL

        ; disable vblank interrupts whilst we update the queue; we don't want
        ; the queue being emptied whilst we're writing to it!
        ;
        ld      A,      [IRQ_ENABLE]
        and     IE.vblank^$ff           ; exclude the vblank bit
        ld      [IRQ_ENABLE],   A

        ; get current update queue position:
        ; TODO: handle queue overflow. stop processing buffers, and wait
        ;       for vblank so that the queue can be refilled again?
        ld      HL,     queue_index
        inc     [HL]                    ; move to the next queue slot
        ld      C,      [HL]            ; read the current queue index

        ; we need to write three bytes to the queue:
        ;
        pop     HL                      ; retrieve VRAM address
        ld      A,              H 
        ld      [$FF00+C],      A       ; write hi-byte
        ld      A,              L
        ld      [$FF00+C],      A       ; write lo-byte

        pop     AF                      ; retrieve tile to draw
        ld      [$FF00+C],      A

        ; re-enable vblank interrupts:
        ;
        ld      A,      [IRQ_ENABLE]
        or      IE.vblank
        ld      [IRQ_ENABLE],   A

        pop     HL                      ; (restore front buffer position)
        pop     BC                      ; (restore current buffer position)
        jr      @next
