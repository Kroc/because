; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
.RAMSECTION "Buffers"   ALIGN 256       RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        front_buffer    DSB TILEMAP_WIDTH * TILEMAP_HEIGHT
        back_buffer     DSB TILEMAP_WIDTH * TILEMAP_HEIGHT
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; include the tile graphics and map the various pieces of the card graphics
; to some constants so that we don't have to tweak tile numbers throughout
; the code-base. we want this aligned to one-tile (16-bytes) for some
; tile-copying micro-optimisations
;
.SECTION "TilesCards"   ALIGN 16        RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.DEF    TILE_PALETTE    %11011000

tiles_main:
;===============================================================================
.INCBIN "build/tiles.2bpp"              FSIZE tiles_main__size

; define the conversion from ASCII to the tile-numbers in our tileset:
;
.ASCIITABLE
        ;-----------------------------------------------------------------------
        MAP     "a"     = $50
        MAP     "b"     = $60
        MAP     "c"     = $70
        MAP     "d"     = $51
        MAP     "e"     = $61
        MAP     "f"     = $71
        MAP     "g"     = $52
        MAP     "h"     = $62
        MAP     "i"     = $72
        MAP     "j"     = $53
        MAP     "k"     = $63
        MAP     "l"     = $73
        MAP     "m"     = $54
        MAP     "n"     = $64
        MAP     "o"     = $74
        MAP     "p"     = $55
        MAP     "q"     = $65
        MAP     "r"     = $75
        MAP     "s"     = $56
        MAP     "t"     = $66
        MAP     "u"     = $76
        MAP     "v"     = $57
        MAP     "w"     = $67
        MAP     "x"     = $77
        MAP     "y"     = $58
        MAP     "z"     = $68
        MAP     "!"     = $78
        MAP     ","     = $79
        MAP     "."     = $79
        MAP     " "     = $79

        MAP     "0"     = $40
        MAP     "1"     = $41
        MAP     "2"     = $42
        MAP     "3"     = $43
        MAP     "4"     = $44
        MAP     "5"     = $45
        MAP     "6"     = $46
        MAP     "7"     = $47
        MAP     "8"     = $48
        MAP     "9"     = $49
        MAP     "A"     = $4a           ; GameBoy button "A"
        MAP     "B"     = $4b           ; GameBoy button "B"

        MAP     "S"     = $4a           ; spades symbol
        MAP     "H"     = $5a           ; hearts symbol
        MAP     "C"     = $6a           ; clubs symbol
        MAP     "D"     = $7a           ; diamonds symbol
.ENDA

.DEF    TILE_MENU_BG            $79
.DEF    TILE_TABLEAU_BG         $6f

; cards:
;===============================================================================
; foundation:
;-------------------------------------------------------------------------------
; a foundation is a blank space on the playfield where cards
; are "played off", into their final destination
;
.DEF    TILE_FNDT_Y1X1          $d6     ; foundation, top-left
.DEF    TILE_FNDT_Y1X2          $e6     ; foundation, top-centre
.DEF    TILE_FNDT_Y1X3          $f6     ; foundation, top-right
.DEF    TILE_FNDT_Y2X1          $d7     ; foundation, upper-middle left
.DEF    TILE_FNDT_Y2X2          $e7     ; foundation, upper-middle centre
.DEF    TILE_FNDT_Y2X3          $f7     ; foundation, upper-middle right
.DEF    TILE_FNDT_Y3X1          $d8     ; foundation, lower-middle left
.DEF    TILE_FNDT_Y3X2          $e8     ; foundation, lower-middle centre
.DEF    TILE_FNDT_Y3X3          $f8     ; foundation, lower-middle right
.DEF    TILE_FNDT_Y4X1          $d9     ; foundation, bottom-left
.DEF    TILE_FNDT_Y4X2          $e9     ; foundation, bottom-centre
.DEF    TILE_FNDT_Y4X3          $f9     ; foundation, bottom-right

; deck:
;-------------------------------------------------------------------------------
; a deck is a pile of face-down cards
;
.DEF    TILE_DECK_Y0X1          $d0     ; deck, top-left
.DEF    TILE_DECK_Y0X2          $e0     ; deck, top-centre
.DEF    TILE_DECK_Y0X3          $f0     ; deck, top-right

; the middle three rows of the deck repeat
.DEF    TILE_DECK_Y1X1          $d2     ; deck, middle-left (row 2)
.DEF    TILE_DECK_Y1X2          $e2     ; deck, middle-centre (row 2)
.DEF    TILE_DECK_Y1X3          $f2     ; deck, middle-right (row 2)
.DEF    TILE_DECK_Y2X1          $d2     ; deck, middle-left (row 3)
.DEF    TILE_DECK_Y2X2          $e2     ; deck, middle-centre (row 3)
.DEF    TILE_DECK_Y2X3          $f2     ; deck, middle-right (row 3)
.DEF    TILE_DECK_Y3X1          $d2     ; deck, bottom-left (row 4)
.DEF    TILE_DECK_Y3X2          $e2     ; deck, bottom-centre (row 4)
.DEF    TILE_DECK_Y3X3          $f2     ; deck, bottom-right (row 4)

; bottom-row of the deck
.DEF    TILE_DECK_Y4X1          $d5     ; deck, pile-left
.DEF    TILE_DECK_Y4X2          $e5     ; deck, pile-centre
.DEF    TILE_DECK_Y4X3          $f5     ; deck, pile-right

; back:
;-------------------------------------------------------------------------------
; a card, face-down:
;
.DEF    TILE_BACK_Y1X1          $d1     ; back, top-left
.DEF    TILE_BACK_Y1X2          $e1     ; back, top-centre
.DEF    TILE_BACK_Y1X3          $f1     ; back, top-right
.DEF    TILE_BACK_Y2X1          $d2     ; back, middle-left (row 2)
.DEF    TILE_BACK_Y2X2          $e2     ; back, middle-centre (row 2)
.DEF    TILE_BACK_Y2X3          $f2     ; back, middle-right (row 2)
.DEF    TILE_BACK_Y3X1          $d3     ; back, middle-left (row 3)
.DEF    TILE_BACK_Y3X2          $e3     ; back, middle-centre (row 3)
.DEF    TILE_BACK_Y3X3          $f3     ; back, middle-right (row 3)
.DEF    TILE_BACK_Y4X1          $d4     ; back, bottom-left
.DEF    TILE_BACK_Y4X2          $e4     ; back, bottom-centre
.DEF    TILE_BACK_Y4X3          $f4     ; back, bottom-right

; face-up:
;-------------------------------------------------------------------------------
; the top-left corner of a face-up card has the
; ordinal (number) of the card, Ace through King:
;
.DEF    TILE_CARD_Y1X1          $81
.DEF    TILE_CARD_Y1X1_A        $81+0   ; Ace
.DEF    TILE_CARD_Y1X1_2        $81+1   ; Two
.DEF    TILE_CARD_Y1X1_3        $81+2   ; Three
.DEF    TILE_CARD_Y1X1_4        $81+3   ; Four
.DEF    TILE_CARD_Y1X1_5        $81+4   ; Five
.DEF    TILE_CARD_Y1X1_6        $81+5   ; Six
.DEF    TILE_CARD_Y1X1_7        $81+6   ; Seven
.DEF    TILE_CARD_Y1X1_8        $81+7   ; Eight
.DEF    TILE_CARD_Y1X1_9        $81+8   ; Nine
.DEF    TILE_CARD_Y1X1_10       $81+9   ; Ten
.DEF    TILE_CARD_Y1X1_J        $81+10  ; Jack
.DEF    TILE_CARD_Y1X1_Q        $81+11  ; Queen
.DEF    TILE_CARD_Y1X1_K        $81+12  ; King

; the top-centre of a face-up card is blank
.DEF    TILE_CARD_Y1X2          $8f

; the top-right of a face-up card has the suit:
.DEF    TILE_CARD_Y1X3          $80
.DEF    TILE_CARD_Y1X3_SPD      $90     ; Spades
.DEF    TILE_CARD_Y1X3_CLB      $a0     ; Clubs
.DEF    TILE_CARD_Y1X3_HRT      $b0     ; Hearts
.DEF    TILE_CARD_Y1X3_DMD      $c0     ; Diamonds

; the left, centre and right of the middle
; portion of the card (two-rows) is blank:
.DEF    TILE_CARD_Y2X1          $9f
.DEF    TILE_CARD_Y2X2          $af
.DEF    TILE_CARD_Y2X3          $bf
.DEF    TILE_CARD_Y3X1          $9f
.DEF    TILE_CARD_Y3X2          $af
.DEF    TILE_CARD_Y3X3          $bf

; the bottom-left of a face-up card has the suit:
.DEF    TILE_CARD_Y4X1          $8e
.DEF    TILE_CARD_Y4X1_SPD      $9e     ; Spades
.DEF    TILE_CARD_Y4X1_CLB      $ae     ; Clubs
.DEF    TILE_CARD_Y4X1_HRT      $be     ; Hearts
.DEF    TILE_CARD_Y4X1_DMD      $ce     ; Diamonds

; the bottom-centre is blank
.DEF    TILE_CARD_Y4X2          $cf

; the bottom-right of a face-up card has the ordinal:
.DEF    TILE_CARD_Y4X3          $a1
.DEF    TILE_CARD_Y4X3_A        $a1+0   ; Ace
.DEF    TILE_CARD_Y4X3_2        $a1+1   ; Two
.DEF    TILE_CARD_Y4X3_3        $a1+2   ; Three
.DEF    TILE_CARD_Y4X3_4        $a1+3   ; Four
.DEF    TILE_CARD_Y4X3_5        $a1+4   ; Five
.DEF    TILE_CARD_Y4X3_6        $a1+5   ; Six
.DEF    TILE_CARD_Y4X3_7        $a1+6   ; Seven
.DEF    TILE_CARD_Y4X3_8        $a1+7   ; Eight
.DEF    TILE_CARD_Y4X3_9        $a1+8   ; Nine
.DEF    TILE_CARD_Y4X3_10       $a1+9   ; Ten
.DEF    TILE_CARD_Y4X3_J        $a1+10  ; Jack
.DEF    TILE_CARD_Y4X3_Q        $a1+11  ; Queen
.DEF    TILE_CARD_Y4X3_K        $a1+12  ; King

; card tilemaps:
;===============================================================================
tilemap_empty:
        ;-----------------------------------------------------------------------
        ; this is the dotted-outline used for showing an empty pile,
        ; such as the deck, hand, or foundation
        ;
@row1:  .BYTE   TILE_FNDT_Y1X1, TILE_FNDT_Y1X2, TILE_FNDT_Y1X3
@row2:  .BYTE   TILE_FNDT_Y2X1, TILE_FNDT_Y2X2, TILE_FNDT_Y2X3
@row3:  .BYTE   TILE_FNDT_Y3X1, TILE_FNDT_Y3X2, TILE_FNDT_Y3X3
@row4:  .BYTE   TILE_FNDT_Y4X1, TILE_FNDT_Y4X2, TILE_FNDT_Y4X3

tilemap_deck:
        ;-----------------------------------------------------------------------
        ; a full deck
        ;
@row0:  .BYTE   TILE_DECK_Y0X1, TILE_DECK_Y0X2, TILE_DECK_Y0X3
@row1:  .BYTE   TILE_DECK_Y1X1, TILE_DECK_Y1X2, TILE_DECK_Y1X3
@row2:  .BYTE   TILE_DECK_Y2X1, TILE_DECK_Y2X2, TILE_DECK_Y2X3
@row3:  .BYTE   TILE_DECK_Y3X1, TILE_DECK_Y3X2, TILE_DECK_Y3X3
@row4:  .BYTE   TILE_DECK_Y4X1, TILE_DECK_Y4X2, TILE_DECK_Y4X3

tilemap_back:
        ;-----------------------------------------------------------------------
        ; the back of a card
        ;
@row1:  .BYTE   TILE_BACK_Y1X1, TILE_BACK_Y1X2, TILE_BACK_Y1X3
@row2:  .BYTE   TILE_BACK_Y2X1, TILE_BACK_Y2X2, TILE_BACK_Y2X3
@row3:  .BYTE   TILE_BACK_Y3X1, TILE_BACK_Y3X2, TILE_BACK_Y3X3
@row4:  .BYTE   TILE_BACK_Y4X1, TILE_BACK_Y4X2, TILE_BACK_Y4X3

tilemap_back_left:
        ;-----------------------------------------------------------------------
        ; the left-edge (1-column) of the back of a card
        ;
        .BYTE   TILE_BACK_Y1X1, TILE_BACK_Y2X1, TILE_BACK_Y3X1, TILE_BACK_Y4X1

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS


init:
;===============================================================================
        ldh     A,      [<LCDC]
        or      LCDC.window_select      ; use $9C00 for the window-map
        or      LCDC.bg_display         ; turn background on
        ldh     [<LCDC],        A

        call    clearQueue              ; clear the tile update queue
        call    copyMainTileset         ; copy main tileset from ROM to VRAM

        call    tableau.clearTiles      ; clear the tableau (playing space)
        call    menu.clear              ; clear and draw the menu
        call    refresh                 ; do a full screen refresh

        ; set palette:
        ld      A,      TILE_PALETTE
        ldh     [<BGP], A

        jp      screenOn


copyMainTileset:
;===============================================================================
; copy the main tileset used throughout the game:
;
; TODO: check vblank/lcd-stat for safety on CGB, we can use DMA to do this
;-------------------------------------------------------------------------------
        ld      HL,     tiles_main      ; set source address
        ld      DE,     VRAM_TILES2     ; set destination VRAM position

        ; number of tiles to copy, 0-based
        ; (each tile is 16-bytes)
        ld      B,      (tiles_main__size / 16) - 1

        ; fallthrough
        ; ...

copyTiles:
;===============================================================================
; copy a number of graphic tiles to VRAM:
;
; in:   HL      starting address of tiles
;       DE      VRAM destination, e.g. $8000
;       B       number of tiles to copy, 1-based
;               use "0" for 256 tiles
;
; TODO: on GBC we could do this using DMA?
;-------------------------------------------------------------------------------
.REPEAT 15
        ld      A,      [HL+]                                           ;+8
        ld      [DE],   A                                               ;+8
        inc     E                                                       ;+4
.ENDR
        ld      A,      [HL+]                                           ;+8
        ld      [DE],   A                                               ;+8
        inc     DE                                                      ;+8
        
        dec     B
        jr      nz, copyTiles
        
        ret


getBufferAddr:
;===============================================================================
; given an X & Y tile co-ordinate, return an address in the screen-buffer:
;
; in:   B       y-position (row) in the tile-map (32x32)
;       C       x-position (column) in the tile-map (32x32)
;
; out:  HL      address within the screen-buffer
;       A, DE   (preserved)
;       BC      (clobbered)
;-------------------------------------------------------------------------------
        ; we need to multiply Y (row) by 32
        ld      H,      0               ; prepare HL,
        ld      L,      B               ; with row-number only

        ; TODO: use a lookup table of rows (just 64 bytes!)
        ;       also, we could use SWAP to partially multiply by 4,
        ;       but this requires the A register which we need to preserve
        ;       <github.com/pret/pokecrystal/wiki/Optimizing-assembly-code>
        ;
        add     HL,     HL              ; x2
        add     HL,     HL              ; x4
        add     HL,     HL              ; x8
        add     HL,     HL              ; x16
        add     HL,     HL              ; x32

        ld      B,      0               ; prepare BC with column only
        add     HL,     BC              ; add the column
        ld      BC,     front_buffer    ; get screen-buffer address
        add     HL,     BC              ; finally, add our offset

        ret


writeTiles_5rows:
;===============================================================================
        call    writeTiles

writeTiles_4rows:
;===============================================================================
        call    writeTiles

writeTiles_3rows:
;===============================================================================
        call    writeTiles

writeTiles_2rows:
;===============================================================================
        call    writeTiles

writeTiles_1row:
;===============================================================================
writeTiles:
;===============================================================================
; in:   DE      address with tiles to read from
;       HL      address to write to, where 3 tiles are written and then
;               the address is moved to the next row of the tilemap
;
; out:  HL      the front-buffer address is advanced to the next tilemap row
;       DE      the read address is advanced by 3
;       BC      (preserved)
;       AF      (clobbered)
;-------------------------------------------------------------------------------
        ld      A,      [DE]
        inc     DE
        ld      [HL+],  A
        ld      A,      [DE]
        inc     DE
        ld      [HL+],  A
        ld      A,      [DE]
        inc     DE
        ld      [HL+],  A

        ; fall through to automatically
        ; move to the next tilemap row
        ; ...

        ;=======================================================================
        ; move to the next tilemap row:
        ;-----------------------------------------------------------------------
        ; we could use `add HL, BC` but we want to preserve BC
        ;
@next:  ld      A,      TILEMAP_WIDTH-3 ; number of tiles to skip to next row
        add     A,      L               ; add this to the address lo-byte
        jr      nc,     +               ; did that overflow?
        inc     H                       ; if so, bump the address hi-byte
+       ld      L,      A
        ret


writeTiles_1col:
;===============================================================================
; in:   DE      address with tiles to read from (1-column arranged in order)
;       HL      address to write to, where 4 tiles are written vertically,
;               then the address is moved to the next column of the tilemap
;
; out:  HL      the front-buffer address is advanced to the next tilemap column
;       DE      the read address is advanced by 3
;       BC      (preserved)
;       AF      (clobbered)
;-------------------------------------------------------------------------------
        ld      A,      [DE]
        inc     DE
        ld      [HL],   A
        call    @next
        ld      A,      [DE]
        inc     DE
        ld      [HL],   A
        call    @next
        ld      A,      [DE]
        inc     DE
        ld      [HL],   A
        call    @next
        ld      A,      [DE]
        ld      [HL],   A
        inc     DE

        ; move front-buffer address to the next column;
        ; this involves moving up by 3 tilemap rows
        ;
        ld      A,      L
        sub     (TILEMAP_WIDTH*3)-1     ; (less one tile, to move right a col)
        jr      nc,     +               ; did that underflow?
        dec     H                       ; if so, bump the address hi-byte
+       ld      L,      A
        ret

        ;=======================================================================
        ; move to the next tilemap row:
        ;-----------------------------------------------------------------------
        ; we could use `add HL, BC` but we want to preserve BC
        ;
@next:  ld      A,      TILEMAP_WIDTH   ; number of tiles to skip to next row
        add     A,      L               ; add this to the address lo-byte
        jr      nc,     +               ; did that overflow?
        inc     H                       ; if so, bump the address hi-byte
+       ld      L,      A
        ret


refresh:
;===============================================================================
; forces a full update of the background tilemap:
;
; SCREEN MUST BE OFF WHEN CALLING THIS ROUTINE!
; (use `call screenOff`)
;
; normally updates to the tilemap are done partially -- only the tiles that
; have changed between the front & back buffers are written during vblank
;
; a full update copies the current front buffer to the back buffer, then
; the full back buffer is copied to VRAM in one go. the screen cannot be
; on whilst this happens as writes to VRAM outside of vblank are ignored
;
; TODO: on GBC we can use DMA
;-------------------------------------------------------------------------------
        ; clear the update queue to prevent changes to VRAM during vblank
        call    clearQueue

        ; copy front buffer to back buffer:
        ld      HL,     front_buffer
        ld      DE,     back_buffer
        call    @copy

        ; copy back buffer to VRAM:
        ;
        ; on the GameBoy, VRAM is memory-mapped,
        ; though it is inaccessible outside of vblank
        ;
        ld      HL,     back_buffer
        ld      DE,     VRAM_MAP1

        ; copy 1'024 bytes:
        ;-----------------------------------------------------------------------
@copy:  ld      C,      0

-       ld      A,      [HL+]
        ld      [DE],   A
        inc     E
        ld      A,      [HL+]
        ld      [DE],   A
        inc     E
        ld      A,      [HL+]
        ld      [DE],   A
        inc     E
        ld      A,      [HL+]
        ld      [DE],   A
        inc     DE
        dec     C
        jr      nz, -

        ret


update:
;===============================================================================
; compares the differences between the front & back buffers and generates
; the list of VRAM changes (tile queue) to make during vblank:
;
; TODO: pushing to the update queue could be made faster by using PUSH in much
;       the same way POP is used during v-blank to write the tiles. this would
;       necessitate disabling interrupts whilst updating the queue, which could
;       conflict with any h-blank effects we might use
;
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        xor     A                       ; (set A to 0)
        ldh     [<update_tiles],A       ; disable tile updates during vblank
        ld      HL,     back_buffer
        ld      DE,     front_buffer
        ld      BC,     tile_queue

        ;-----------------------------------------------------------------------
        ; #1:
@loop:  ld      A,      [DE]            ; read tile from front-buffer
        cp      [HL]                    ; compare with back-buffer
        call    nz,     @push           ; if they're different, add to queue
        inc     E                       ; move forward in the front-buffer,
        inc     L                       ; and keep the back-buffer in step
        ; #2:
        ld      A,      [DE]            ; read tile from front-buffer
        cp      [HL]                    ; compare with back-buffer
        call    nz,     @push           ; if they're different, add to queue
        inc     E                       ; move forward in the front-buffer,
        inc     L                       ; and keep the back-buffer in step
        ; #3:
        ld      A,      [DE]            ; read tile from front-buffer
        cp      [HL]                    ; compare with back-buffer
        call    nz,     @push           ; if they're different, add to queue
        inc     E                       ; move forward in the front-buffer,
        inc     L                       ; and keep the back-buffer in step
        ; #4:
        ld      A,      [DE]            ; read tile from front-buffer
        cp      [HL]                    ; compare with back-buffer
        call    nz,     @push           ; if they're different, add to queue
        inc     E                       ; move forward in the front-buffer,
        inc     L                       ; and keep the back-buffer in step

        ; by only incrementing the lo-byte,
        ; we can save cycles on every loop
        jr      nz,     @loop
        ; increment the high-bytes
        inc     D                       ; (front-buffer)
        inc     H                       ; (back-buffer)

        ; have we reached the end of the loop?
        ; when bit 10 of the address (bit 2 of the hi-byte)
        ; is set, it means that we've hit exactly 1024
        bit     2,      H
        jr      nz,     @loop

        ; the last entry in the queue must be zero-terminated
        ;-----------------------------------------------------------------------
@exit:  xor     A                       ; (set A to zero)
        dec     C                       ; move past tile,
        dec     C                       ; to cpu flags
        ld      [BC],   A               ; write a zero to mark the end

        ; queue is ready, allow tile updates from vblank
        dec     A                       ; (set A to $FF)
        ldh     [<update_tiles],A

        ; <- interrupt could happen here, writing the tiles to VRAM!
        ret

        ; queue the tile update:
        ;=======================================================================
        ; there's a difference! update the back-buffer
        ; to match the front (for future comparisions)
@push:  ld      [HL],   A

        ; write the data to the queue:
        ; these bytes need to be written in the order that POP would read them
        ld      A,      L
        ld      [BC],   A               ; write VRAM lo-byte
        inc     C
        ; calculate the matching VRAM address hi-byte from the back-buffer
        ; address. since HL & DE are already used as the back/front buffer,
        ; and we don't have another register free, we can simply adjust the
        ; back buffer address down to the VRAM address using the difference
        ; since both share the same lo-byte (both are aligned)
        ld      A,      H
        ; back buffer is $C400 and VRAM_MAP1 is $9800, so we subtract
        ; the difference. the same could be done with the front-buffer,
        ; but I chose the back buffer to minimise use of DE
        sub     A,      >(back_buffer - VRAM_MAP1)
        ld      [BC],   A               ; write VRAM hi-byte
        inc     C
        ; the tile data is written as two bytes even though we only use one;
        ; surprisingly, this is for a critical optimisation during vblank.
        ; when this value is POPed, the first byte will become the cpu flags!
        ; all valid entries in the queue have the zero-flag clear; when a
        ; zero byte is encounted (NOTE: this equates to the zero-bit SET),
        ; then the queue has reached the end
        ;
        ld      A,      %10000000       ; write cpu flags!
        ld      [BC],   A
        inc     C
        ld      A,      [DE]            ; read back tile-value
        ld      [BC],   A               ; write tile to draw
        inc     C

        bit     7,      C
        ret     z

        ld      B,B

        ; TODO: is the queue full?
        ret