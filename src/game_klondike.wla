; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; create template card piles for the intial setup of the game:
;
;       .---. .---.       .---. .---. .---. .---.
;       |DCK| |HND|       | F | | F | | F | | F |
;       |   | |   |       | 1 | | 2 | | 3 | | 4 |
;       '---' '---'       '---' '---' '---' '---'
;       .---. .---. .---. .---. .---. .---. .---.
;       | D | | D | | D | | D | | D | | D | | D |
;       | 1 | | 2 | | 3 | | 4 | | 5 | | 6 | | 7 |
;       '---' '---' '---' '---' '---' '---' '---'
;
.DEF    PILE_DEPOT_KLONDIKE     TYPE_COLUMN | RULE_KLONDIKE

piles.Begin
        ; label,                type, max-cards,
        ; row,                  col,
        ; pile-left,            pile-right,
        ; pile-up,              pile-down
piles.Define \
        klondike_deck,          TYPE_DECK, 52, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT, \
        INDEX_FOUNDATION4,      INDEX_HAND, \
        INDEX_DEPOT1,           INDEX_DEPOT1
piles.Define \
        klondike_hand,          PILE_HAND, 24, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 3, \
        INDEX_DECK,             INDEX_FOUNDATION1, \
        INDEX_DEPOT2,           INDEX_DEPOT2
;
; foundations:
;
piles.Define \
        klondike_foundation1,   PILE_FOUNDATION, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 9, \
        INDEX_HAND,             INDEX_FOUNDATION2, \
        INDEX_DEPOT4,           INDEX_DEPOT4
piles.Define \
        klondike_foundation2,   PILE_FOUNDATION, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 12, \
        INDEX_FOUNDATION1,      INDEX_FOUNDATION3, \
        INDEX_DEPOT5,           INDEX_DEPOT5
piles.Define \
        klondike_foundation3,   PILE_FOUNDATION, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 15, \
        INDEX_FOUNDATION2,      INDEX_FOUNDATION4, \
        INDEX_DEPOT6,           INDEX_DEPOT6
piles.Define \
        klondike_foundation4,   PILE_FOUNDATION, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 18, \
        INDEX_FOUNDATION3,      INDEX_DECK, \
        INDEX_DEPOT7,           INDEX_DEPOT7
;
; depots:
;
; note that the maximum number of cards a pile can held is 13
; (a full K to A sequence) plus the number of unturned cards
; which varies across the depots
piles.Define \
        klondike_depot1,        PILE_DEPOT_KLONDIKE, 13+0, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT, \
        INDEX_DEPOT7,           INDEX_DEPOT2, \
        INDEX_DECK,             INDEX_DECK
piles.Define \
        klondike_depot2,        PILE_DEPOT_KLONDIKE, 13+1, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT + 3, \
        INDEX_DEPOT1,           INDEX_DEPOT3, \
        INDEX_HAND,             INDEX_HAND
piles.Define \
        klondike_depot3,        PILE_DEPOT_KLONDIKE, 13+2, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT + 6, \
        INDEX_DEPOT2,           INDEX_DEPOT4, \
        INDEX_HAND,             INDEX_HAND
piles.Define \
        klondike_depot4,        PILE_DEPOT_KLONDIKE, 13+3, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT + 9, \
        INDEX_DEPOT3,           INDEX_DEPOT5, \
        INDEX_FOUNDATION1,      INDEX_FOUNDATION1
piles.Define \
        klondike_depot5,        PILE_DEPOT_KLONDIKE, 13+4, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT + 12, \
        INDEX_DEPOT4,           INDEX_DEPOT6, \
        INDEX_FOUNDATION2,      INDEX_FOUNDATION2
piles.Define \
        klondike_depot6,        PILE_DEPOT_KLONDIKE, 13+5, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT + 15, \
        INDEX_DEPOT5,           INDEX_DEPOT7, \
        INDEX_FOUNDATION3,      INDEX_FOUNDATION3
piles.Define \
        klondike_depot7,        PILE_DEPOT_KLONDIKE, 13+6, \
        TABLEAU_TOP + 5,        TABLEAU_LEFT + 18, \
        INDEX_DEPOT6,           INDEX_DEPOT1, \
        INDEX_FOUNDATION4,      INDEX_FOUNDATION4


init:
;===============================================================================
        ; setup the tableau layout for the game
        ;-----------------------------------------------------------------------
        ; completely clear the table of cards, both the piles and the storage
        ; pool of all cards on the table. this will also clear the undo buffer
        call    tableau.init
        ; when the piles are cleared,
        ; the cursor's pile must be reallocated
        call    tableau.allocateCursorPile

        ; allocate & shuffle the deck
        ld      BC,     klondike_deck
        call    piles.allocateDeck
        ; allocate the hand (draw 1 / 3)
        ld      L,      INDEX_HAND
        call    piles.allocate
        ; allocate the foundations:
        call    piles.allocate        ; foundation 1
        call    piles.allocate        ; foundation 2
        call    piles.allocate        ; foundation 3
        call    piles.allocate        ; foundation 4
        ; allocate the depots:
        call    piles.allocate        ; depot 1
        call    piles.allocate        ; depot 2
        call    piles.allocate        ; depot 3
        call    piles.allocate        ; depot 4
        call    piles.allocate        ; depot 5
        call    piles.allocate        ; depot 6
        call    piles.allocate        ; depot 7
        
        ; populate sample cards
        ;-----------------------------------------------------------------------
        ; hand:
        ld      L,      INDEX_HAND
        ld      A,      CARD_5 | SUIT_DIAMOND
        call    piles.pushCard
        ld      A,      CARD_6 | SUIT_CLUB
        call    piles.pushCard
        ld      A,      CARD_7 | SUIT_DIAMOND
        call    piles.pushCard
        ; foundations:
        ld      L,      INDEX_FOUNDATION1
        ld      A,      CARD_A | SUIT_CLUB
        call    piles.pushCard
        ld      L,      INDEX_FOUNDATION2
        ld      A,      CARD_A | SUIT_SPADE
        call    piles.pushCard
        ld      L,      INDEX_FOUNDATION3
        ld      A,      CARD_A | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_FOUNDATION4
        ld      A,      CARD_A | SUIT_DIAMOND
        call    piles.pushCard
        ; depots:
        ld      L,      INDEX_DEPOT1
        ld      A,      CARD_5 | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_DEPOT2
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_8 | SUIT_CLUB
        call    piles.pushCard
        ld      L,      INDEX_DEPOT3
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_7 | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_DEPOT4
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_2 | SUIT_CLUB
        call    piles.pushCard
        ld      L,      INDEX_DEPOT5
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_9 | SUIT_DIAMOND
        call    piles.pushCard
        ld      L,      INDEX_DEPOT6
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_X | SUIT_SPADE
        call    piles.pushCard
        ld      L,      INDEX_DEPOT7
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_A | SUIT_SPADE | CARD_BACK
        call    piles.pushCard
        ld      A,      CARD_4 | SUIT_SPADE
        call    piles.pushCard
        ld      A,      CARD_3 | SUIT_DIAMOND
        call    piles.pushCard

        ;-----------------------------------------------------------------------
        call    tableau.refresh
        call    screenOff
        call    tilemap.refresh
        call    screenOn

        ; everything ready, set this as the current running game
        ld      HL,     game.id
        ld      [HL],   GAME_KLONDIKE

        ld      L,      INDEX_DECK
        jp      tableau.pointToPile


checkPile:
;===============================================================================
; enable / disable cards in Klondike depots:
;
; the face-up cards are valid, the face-down cards are not;
; this is so that the cursor will not navigate over the face-down cards
;
; in:   L       pile index (`INDEX_*`)
; out:  L, BC   (preserved)
;       AF, DE  (clobbered)
;       H       (clobbered) -- select a field before using HL!
;-------------------------------------------------------------------------------
        ; we will start with the end (top-most)
        ; of the pile and work backwards
        ;
        rst     piles.rst_pileCount     ; number of cards in pile
        ld      C,      A               ; will be our counter
        dec     A                       ; (adjust to 0-based)
        rst     piles.rst_cardAddr      ; get pool addr of last card

        ;-----------------------------------------------------------------------
-       ld      A,      [DE]            ; read card value
        bit     BIT_BACK,       A       ; is the card face-down?
        jr      nz,     +               ; if so, begin disabling cards
        and     ~CARD_DISABLED          ; remove disabled bit
        ld      [DE],   A               ; update the pool
        dec     DE                      ; move to previous card
        dec     C                       ; one less card
        jr      nz,     -               ; finished?
        ;-----------------------------------------------------------------------
        ret

        ; disable the rest of the cards:
+       ;-----------------------------------------------------------------------
-       ld      A,      [DE]            ; read card value
        or      CARD_DISABLED           ; add the disabled bit
        ld      [DE],   A               ; update the pool
        dec     DE                      ; move to previous card
        dec     C                       ; one less card
        jr      nz,     -               ; finished?
        ;-----------------------------------------------------------------------
        ret


validatePile:
;===============================================================================
; validate a depot pile according to Klondike rules:
;
; for depots a card is valid if it, and any cards on top of it, can continue
; the descending, alternating colour, sequence of another depot pile 
;
; TODO: also valid if top card can go to foundation
;
; in:   L       pile index (`INDEX_*`)
; out:  L       (preserved)
;-------------------------------------------------------------------------------
        ; the routine must return the original pile index
        ; as it's being used as the counter over all piles
        push    HL

        ;=======================================================================
        ; walk down the input pile of cards;
        ; we will be checking if each card can continue
        ; a sequence at the end of the other depots
        ;
@depot: rst     piles.rst_pileCount     ; number of cards in pile, 1-based
        ld      C,      A               ; this will be our counter
        rst     piles.rst_poolAddr      ; addr of cards for our pile (DE)
        ;-----------------------------------------------------------------------
-       ld      A,      [DE]            ; read card value
        bit     BIT_BACK,       A       ; `CARD_BACK`?
        call    nz,     @back           ; mark face-down cards as invalid
        call    z,      @pile           ; compare our card with other piles
        inc     DE                      ; move to next card
        dec     C                       ; one less card,
        jr      nz,     -               ; keep going until all cards done
        ;-----------------------------------------------------------------------
        pop     HL                      ; return original pile index
        ret

        ;-----------------------------------------------------------------------
@back:  ld      A,      [DE]
        or      CARD_DISABLED           ; set the disabled bit
        ld      [DE],   A
        ret                             ; the OR always returns non-zero flag

        ; compare card with other piles:
        ;=======================================================================
        ; prepare a pre-computed 'valid card' value to match against,
        ; this is, a card of the opposite colour and one above in rank:
        ;
@pile:  and     MASK_RANK               ; isolate the card's rank
        cp      CARD_K                  ; if our card is king, there can be no
        jr      z,      @back           ;  no higher card so mark it invalid
        inc     A                       ; add 1, for the card we're looking for
        ld      B,      A               ; put rank aside to handle suit
        ld      A,      [DE]            ; start again with card value
        and     MASK_COLOUR             ; keep only the suit colour
        xor     MASK_COLOUR             ; flip the suit colour
        or      B                       ; add suit colour to the rank
        ld      B,      A               ; B = card rank+colour to match

        ; begin searching the other depots:
        ; note that once a valid match has been found (c+),
        ; we skip checking the other depots (`call nc, ...`)
        ld      L,      INDEX_DEPOT1
        call            @cp
        ld      L,      INDEX_DEPOT2
        call    nc,     @cp
        ld      L,      INDEX_DEPOT3
        call    nc,     @cp
        ld      L,      INDEX_DEPOT4
        call    nc,     @cp
        ld      L,      INDEX_DEPOT5
        call    nc,     @cp
        ld      L,      INDEX_DEPOT6
        call    nc,     @cp
        ld      L,      INDEX_DEPOT7
        call    nc,     @cp

        ; read the source card value once more
        ld      A,      [DE]
        ; flip the carry due to the $80->$00
        ; ordering of the tiles in VRAM
        ccf
        ; shift the carry (result bit) into bit 0,
        ; pushing the old disabled bit off
        rla
        ; now rotate the byte back so that bit 0
        ; (the new disabled bit) becomes bit 7
        rrca
        ; finally, update the pile
        ; with the validation result
        ld      [DE],   A
        ret

        ;=======================================================================
@cp:    rst     piles.rst_pileCount     ; is the pile (L) empty?
        ret     z

        ; preserve the address of the original card (DE)
        ; whilst we look up the last card in the other pile (L)
        push    DE
        ; fetch the top-most card (A) of the pile (L) we're comparing against
        call    piles.getLastCard
        ; mask out unrelated bits; we want the rank and the colour, but not
        ; the pip type (heart|diamond vs club|spade) or other properties
        and     MASK_COLOUR | MASK_RANK
        ; compare with the pre-computed matching card
        cp      B
        ; we need to return carry set for a match, unset for no-match,
        ; but our type of comparison is only valid for the zero-flag
        ; so we will conditionally set the carry flag on our way out
        ;
        ; "fun" fact, unlike the 6502, the Z80/SM83 doesn't have
        ; a 'clear carry flag' instruction; it can only set it
        ; and flip ("compliment") the current state
        ;
        scf                             ; set carry flag by default
        jr      z,      +               ; if card matched, return the carry
        ccf                             ; no match -- flip the carry to off

+       pop     DE                      ; return address of original card
        ret                             ;  to be able to update the invalid bit