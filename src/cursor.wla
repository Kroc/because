; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; default starting position of the cursor
; (for the GameBoy's screen)
.DEF    CURSOR_START_X  80
.DEF    CURSOR_START_Y  72

.DEF    MODE_FREE       0               ; cursor is free to move
.DEF    MODE_HOLD       1               ; cursor is holding cards
.DEF    MODE_CARD       2               ; moving card, no cursor

; (musn't cross an 8-bit boundary for a micro-optimisation)
;
.RAMSECTION "Cursor"    BITWINDOW 8     RETURNORG
        ;-----------------------------------------------------------------------
        dest_x          BYTE            ; new X-position to move cursor to
        xpos            BYTE            ; current cursor X-position (px)
        dest_y          BYTE            ; new Y-position to move cursor to
        ypos            BYTE            ; current cursor Y-position (px)
        ;-----------------------------------------------------------------------
        mode            BYTE            ; to control different cursor behaviour
        ;-----------------------------------------------------------------------
        card            BYTE            ; card value whilst building sprites
.ENDS


init:
;===============================================================================
        ; clear variables:
        xor     A                       ; (set A to zero)
        ld      HL,     SECTIONSTART_cursor.Cursor
        call    fill@x{SECTIONEND_cursor.Cursor-SECTIONSTART_cursor.Cursor}

        ; configure the cursor sprite:
        ld      HL,     sprites.attrs
        ld      A,      CURSOR_START_Y  ; starting Y-position
        ld      [ypos],         A
        ld      [dest_y],       A
        ld      [HL+],          A
        ld      A,      CURSOR_START_X  ; starting X-position
        ld      [xpos],         A
        ld      [dest_x],       A
        ld      [HL+],          A
        ld      A,      SPRITE_HAND_LHS ; tile-number
        ld      [HL+],  A
        xor     A                       ; (set A to zero)
        ld      [HL+],  A               ; display attribute

        ld      A,      CURSOR_START_Y  ; starting Y-position
        ld      [HL+],  A
        ld      A,      CURSOR_START_X + 8
        ld      [HL+],  A
        ld      A,      SPRITE_HAND_RHS ; tile-number
        ld      [HL+],  A
        ld      [HL],   0               ; display attributes

        ; flag the sprite changes to be uploaded during vblank
        jp      sprites.update


setMode:
;===============================================================================
; change the cursor behaviour mode:
;
; out:  BC      (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ld      [mode], A
        and     A,      A
        jr      z,      @free
        dec     A
        jr      z,      @hold
        dec     A
        jr      z,      @card

        ret

        ; set the cursor to free-mode:
        ;-----------------------------------------------------------------------
        ; reset the hand sprite to the default cursor
@free:  ld      A,      SPRITE_HAND_LHS
        ld      [sprites.attrs.1.tile], A
        ld      A,      SPRITE_HAND_RHS
        ld      [sprites.attrs.2.tile], A
        ret

        ; set the cursor to hold-mode:
        ;-----------------------------------------------------------------------
        ; change the cursor to the holding hand
@hold:  ld      A,      SPRITE_HOLD_LHS
        ld      [sprites.attrs.1.tile], A
        ld      A,      SPRITE_HOLD_RHS
        ld      [sprites.attrs.2.tile], A
        ret

        ; set the cursor to card-mode:
        ;-----------------------------------------------------------------------
        ; hide the cursor, only the card will be visible
@card:  xor     A                       ; set A to 0 = SPRITE_NONE
        ld      [sprites.attrs.1.tile], A
        ld      [sprites.attrs.2.tile], A
        ret


setPos:
;===============================================================================
; manually positions the cursor, no animation:
;
; NOTE: does not set the sprite update flag!
;
; in:   B       screen Y-position, in px
;       C       screen X-position, in px
; out:  B, C    (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ld      A,                      B
        ld      [ypos],                 A
        ld      [sprites.attrs.1.y],    A
        ld      [sprites.attrs.2.y],    A
        ld      A,                      C
        ld      [xpos],                 A
        ld      [sprites.attrs.1.x],    A
        add     A,                      8
        ld      [sprites.attrs.2.x],    A
        ret


clearCards:
;===============================================================================
; remove the card sprites held by the cursor,
; leaving the cursor itself:
;
; out:  BC, DE  (preserved)
;       A, HL   (clobbered)
;-------------------------------------------------------------------------------
        ; address of the third sprite in the local sprite table;
        ; the first two sprites are the hand cursor
        ld      HL,     sprites.attrs.3
        ; because the number of bytes to clear is fixed we can jump into
        ; `fill` at the exact place needed. this is done not only for speed,
        ; but also to preserve BC. the number of bytes to clear is 38 sprites
        ; (cursor sprites are excluded), times 4 bytes per sprite
        ;
        xor     A                       ; (set A to zero)
        call    fill@x{38*_sizeof_Sprite}

        ; reset the hand sprite to the default cursor
        ld      A,      MODE_FREE
        call    setMode

        ; set the update flag to upload the sprite
        ; changes to VRAM during the next v-blank
        jp      sprites.update


update:
;===============================================================================
; move the cursor one frame towards its destination:
;
; note that sprite position changes are written to the work RAM
; and this is automatically synced with OAM during vblank
;
; out:  DE      (preserved) -- MUST be preserved during vblank usage
;       HL/BC/A (clobbered)
;-------------------------------------------------------------------------------
        ; calculate the X & Y speed to move the cursor:
        ;
        ld      BC,     0               ; default X (C) & Y (B) speed is zero

        ; calculate X-speed:
        ;-----------------------------------------------------------------------
        ; is the cursor in its intended X-position? the destination X-position
        ; and current X-position are next to each other in RAM; we subtract
        ; them from each other to check for any difference
        ;
        ld      HL,     dest_x          ; begin with destination X addr
        ld      A,      [HL+]           ; read and increment addr to current-X
        sub     A,      [HL]            ; subtract destination-X from current-X
        jr      z,      +               ; if equal, no horizontal movement
        sra     A                       ; limit the maximum speed
        sra     A                       ; by dividing the distance by 4
        jr      nz,     +               ; if dividing reduced it to zero,
        inc     A                       ; move by at least 1 pixel
+       ld      C,      A               ; remember this "x-speed"

        ; calculate Y-speed:
        ;-----------------------------------------------------------------------
        ; is the cursor in its intended Y-position? the destination Y-position
        ; and current Y-position are next to each other in RAM; we subtract
        ; them from each other to check for any difference
        ;
        inc     L                       ; move to `cursor.dest_y`
        ld      A,      [HL+]           ; read and increment addr to current-Y
        sub     A,      [HL]            ; subtract destination-Y from current-Y
        jr      z,      +               ; if equal, no vertical movement
        sra     A                       ; limit the maximum speed
        sra     A                       ; by dividing the distance by 4
        jr      nz,     +               ; if dividing reduced it to zero,
        inc     A                       ; move by at least 1 pixel
+       ld      B,      A               ; remember "y-speed"

        ; any movement at all?
        or      C                       ; combine X-speed (C) & Y-speed (A)
        ret     z                       ; if zero, no movement to be done

        ; move card sprites:
        ;-----------------------------------------------------------------------
        ld      HL,     sprites.attrs.40.attr
-       dec     L                       ; skip sprite display attributes byte
        ld      A,      [HL-]           ; read sprite tile
        and     A,      A               ; (set flags!)
        jr      z,      +               ; stop at the last card sprite
        ld      A,      [HL]            ; read sprite X-position
        add     A,      C               ; add the speed differential
        ld      [HL-],  A               ; update sprite X-position
        ld      A,      [HL]            ; read sprite Y-position
        add     A,      B               ; add the speed differential
        ld      [HL-],  A               ; update sprite Y-position
        jr      -

        ; move the hand cursor: (sprites 1 & 2)
        ;-----------------------------------------------------------------------
+       ld      HL,     xpos
        ld      A,      C
        add     A,      [HL]            ; add distance to current `cursor.xpos`
        ld      [HL],   A               ; update the `cursor.xpos` variable
        ld      [sprites.attrs.1.x],    A
        add     A,      8
        ld      [sprites.attrs.2.x],    A

        ld      HL,     ypos
        ld      A,      B
        add     A,      [HL]            ; add distance to current `cursor.ypos`
        ld      [HL],   A               ; update the `cursor.ypos` variable
        ld      [sprites.attrs.1.y],    A
        ld      [sprites.attrs.2.y],    A

        ; set the update flag to upload the sprite
        ; changes to VRAM during the next v-blank
        jp      sprites.update


moveToTile:
;===============================================================================
; move the cursor to a given tile row/col:
; this is a tile position, NOT pixels
;
; the move isn't instant, it'll move over several frames until it reaches
; its destination. another position can be set even whilst in motion
;
; in:   B       row position to move the cursor to
;       C       column position to move the cursor to
;
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        ; convert the tile row/col to screen-space pixels
        call    sprites.tilePosToScrXY

        ; offset the cursor a little so that it appears
        ; over the cards rather than on the outside edge
        ld      A,      5
        add     A,      B
        ld      B,      A
        dec     C

        ; fall-through to set the cursor destination
        ;

moveToScrXY:
;===============================================================================
; move the cursor to a specific X/Y position on the screen, in pixels:
;
; the move isn't instant, it'll move over several frames until it reaches
; its destination; another position can be set even whilst in motion
;
; in:   B       Y position to move the cursor to
;       C       X position to move the cursor to
;
; out:  A/BC/DE (preserved)
;       HL      (clobbered)
;-------------------------------------------------------------------------------
        ; update the destination cursor position
        ld      HL,     dest_x
        ld      [HL],   C               ; set destination X-position
        inc     L
        inc     L
        ld      [HL],   B               ; set distination Y-position

        ret


setCard:
;===============================================================================
; changes the cursor to a card, for example, when making auto-moves:
;
; the cursor's pointer (hand) will disappear and be replaced with the
; given card, which will appear in the new position without animation
;
; in:   A       a card value to replace the cursor with
;       B       new cursor position row (in tiles, not px!)
;       C       new cursor position col (in tiles, not px!)
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        push    AF                      ; preserve card value for now

        call    clearCards              ; clear any cards held by the cursor
        ld      A,      MODE_CARD       ; change the cursor mode, so that
        call    setMode                 ;  the cursor's sprite disappears

        ; convert the X/Y tile positions into X/Y screen pixels
        call    sprites.tilePosToScrXY
        ; the sprite version of a card has a border we need to account for
        inc     B                       ; adjust 1px for top-border
        inc     C                       ; adjust 1px for left-border

        ; place the current cursor in this position so that the destination
        ; check will be based upon the card-position, not the old position
        ; of the hand sprite
        call    setPos

        ; because all sprites are in 8x16 mode, we will need to overlap
        ; sprites where cards stack in a pile and due to sprite-priority,
        ; we have to assign sprites from the top of memory, downards
        ; (literally writing the sprite attributes backwards)
        ld      HL,     sprites.attrs.40.attr

        ; create sprites for the card:
        pop     AF
        call    cursor.cardToSprites_Top
        call    cursor.cardToSprites_Bottom

        ; set the update flag to upload the sprite
        ; changes to VRAM during the next v-blank
        jp      sprites.update


cardToSprites_Top:
;===============================================================================
; create sprites for the top half of the card:
; NOTE: does NOT set the sprite update flag
;
; in:   A       value of card to render as sprites
;       HL      this must be set to the last byte of the Sprite in the local
;               sprite attribute table to begin building from, i.e. `attr`+
;               (sprite no. * 4) + 3, because sprites are written to the
;               local sprite attribute table in reverse order; both for
;               simplicity and to ensure correct sprite-priority
;       B       screen Y-position (px) to begin building the sprites
;       C       screen X-position (px) to begin building the sprites
;
; out:  HL      the address in the local sprite attr table will have been
;               decremented according to the number of sprites created, so
;               this routine can be called again, or `cardToSprites_Bottom`
;               for the bottom half of the card
;       B       even though the card sprites are 16px high, the Y-position
;               will only be incremeneted by 8 to allow for overlapping cards;
;               `cardToSprites_Bottom` will correct for this automatically
;       C       (preserved) -- the x-pos can be reused for the bottom-half
;       A       (preserved) -- card value is passed out for reuse
;       DE      (preserved)
;-------------------------------------------------------------------------------
        ld      [card], A               ; backup card value
        ;-----------------------------------------------------------------------
        ; top-left corner: ordinal
        ;-----------------------------------------------------------------------
        ld      [HL],   %00000000       ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        and     MASK_RANK               ; trim out the other bits of card value
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_12X1-2      ; offset the tile with the ordinal
        ld      [HL-],  A               ; set the sprite's tile
        ld      A,      C
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; top-middle:
        ;-----------------------------------------------------------------------
        ld      [HL],   %00000000       ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      SPRITE_CARD_12X2; this one has a fixed sprite tile
        ld      [HL-],  A
        ld      A,      C               ; position this sprite
        add     A,      8               ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; top-right: suit
        ;-----------------------------------------------------------------------
        ld      [HL],   %00000000       ; set sprite display attribute
        dec     L
        ld      A,      [card]          ; retrieve the card value
        swap    A                       ; move the suit to the bottom nybble
        and     MASK_SUIT >> 4          ; mask out the other bits
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_12X3        ; offset the tile with the suit
        ld      [HL-],  A
        ld      A,      C               ; position this sprite
        add     A,      16              ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        add     A,      8               ; move to the next row
        ld      B,      A
        ld      A,      [card]          ; return original card value
        ret


cardToSprites_Bottom:
;===============================================================================
; create sprites for the bottom half of a card:
; NOTE: does NOT set the sprite update flag
;
; in:   A       value of card to be rendered as sprites
;       HL      this must be set to the last byte of the Sprite in the local
;               sprite attribute table to begin building from, i.e. `attr`+
;               (sprite no. * 4) + 3, because sprites are written to the
;               local sprite attribute table in reverse order; both for
;               simplicity and to ensure correct sprite-priority
;       B       screen Y-position (px) to begin building the sprites
;       C       screen X-position (px) to begin building the sprites
;
; out:  HL      the address in the local sprite attr table will have been
;               decremented according to the number of sprites created
;       B       the Y-position is incremeneted by 8 incidentally
;               (even though the sprites created are 16px high)
;       C, DE   (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ld      [card], A               ; backup card value
        ;-----------------------------------------------------------------------
        ; bottom-left: suit
        ;-----------------------------------------------------------------------
        ld      [HL],   %00000000       ; set sprite display attribute
        dec     L
        swap    A                       ; move the suit to the bottom nybble
        and     MASK_SUIT >> 4          ; mask out the other bits
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_34X1        ; offset the tile with the suit
        ld      [HL-],  A
        ld      A,      C
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B               ; since sprites are 8x16,
        add     A,      8               ;  move down another 8px so that
        ld      B,      A               ;  we are 16px below the top-half
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; bottom-middle:
        ;-----------------------------------------------------------------------
        ld      [HL],   %00000000       ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      SPRITE_CARD_34X2; this one has a fixed sprite tile
        ld      [HL-],  A
        ld      A,      C               ; position this sprite
        add     A,      8               ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; bottom-right corner: ordinal
        ;-----------------------------------------------------------------------
        ld      [HL],   %00000000       ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      [card]          ; retrieve the card value
        and     MASK_RANK               ; trim out the other bits of card value
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_34X3-2      ; offset the tile with the ordinal
        ld      [HL-],  A               ; set the sprite's tile
        ld      A,      C               ; position this sprite
        add     A,      16              ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ret