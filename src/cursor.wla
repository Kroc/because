; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; default starting position of the cursor
; (for the GameBoy's screen)
.DEF    CURSOR_START_X  80
.DEF    CURSOR_START_Y  72

; (musn't cross an 8-bit boundary for a micro-optimisation)
;
.RAMSECTION "Cursor"    BITWINDOW 8     RETURNORG
        ;-----------------------------------------------------------------------
        dest_x          BYTE            ; new X-position to move cursor to
        xpos            BYTE            ; current cursor X-position (px)
        dest_y          BYTE            ; new Y-position to move cursor to
        ypos            BYTE            ; current cursor Y-position (px)
        moving          BYTE            ; flag to indicate cursor is moving
.ENDS

.DEF    CURSOR_NONE     0               ; cursor is hidden
.DEF    CURSOR_UP       1               ; upward pointing hand
.DEF    CURSOR_RIGHT    2               ; rightward pointing hand
.DEF    CURSOR_HOLD     3               ; card-holding hand


init:
;===============================================================================
        ; clear variables:
        xor     A                       ; (set A to zero)
        ld      HL,     SECTIONSTART_cursor.Cursor
        call    fill@x{SECTIONEND_cursor.Cursor-SECTIONSTART_cursor.Cursor}

        ; configure the cursor sprite:
        ld      HL,     sprites.attrs
        ld      A,      CURSOR_START_Y  ; starting Y-position
        ld      [ypos],         A
        ld      [dest_y],       A
        ld      [HL+],          A
        ld      A,      CURSOR_START_X  ; starting X-position
        ld      [xpos],         A
        ld      [dest_x],       A
        ld      [HL+],          A
        ld      A,      SPRITE_HAND_LHS ; tile-number
        ld      [HL+],  A
        ld      [HL],   PAL_OBP1        ; display attribute
        inc     L

        ld      A,      CURSOR_START_Y  ; starting Y-position
        ld      [HL+],  A
        ld      A,      CURSOR_START_X + 8
        ld      [HL+],  A
        ld      A,      SPRITE_HAND_RHS ; tile-number
        ld      [HL+],  A
        ld      [HL],   PAL_OBP1        ; display attribute

        ; flag the sprite changes to be uploaded during vblank
        jp      sprites.update


setSprite:
;===============================================================================
; selects which image to use for the cursor:
;
; NOTE: does *not* set the sprite update flag; it's assumed you'll be doing
;       other tile/sprite changes you'll want to queue up first
;
; in:   A       a `CURSOR_*` constant
; out:  BC|DE|HL(preserved)
;       AF      (clobbered)
;-------------------------------------------------------------------------------
        and     A                       ; (set flags)
        jr      z,      @none           ; 0 = hide cursor
        dec     A
        jr      z,      @up             ; 1 = upward pointing hand
        dec     A
        ret     nz                      ; exit for any value > 2

        ; 2 = card-holding hand
@hold:  ld      A,      SPRITE_HOLD_LHS
        ld      [sprites.attrs.1.tile], A
        ld      A,      SPRITE_HOLD_RHS
        ld      [sprites.attrs.2.tile], A
        ret

        ; hide the cursor:
        ; note that A is already zero
@none:  ld      [sprites.attrs.1.tile], A
        ld      [sprites.attrs.2.tile], A
        ret

        ; upward pointing hand:
@up:    ld      A,      SPRITE_HAND_LHS
        ld      [sprites.attrs.1.tile], A
        ld      A,      SPRITE_HAND_RHS
        ld      [sprites.attrs.2.tile], A
        ret

        ; rightward pointing hand:
@right: ld      A,      SPRITE_MENU_LHS
        ld      [sprites.attrs.1.tile], A
        ld      A,      SPRITE_MENU_RHS
        ld      [sprites.attrs.2.tile], A
        ret


setPos:
;===============================================================================
; manually positions the cursor, no animation:
; NOTE: does not set the sprite update flag!
;
; in:   B       screen Y-position, in px
;       C       screen X-position, in px
; out:  B, C    (preserved)
;       HL, DE  (preserved)
;       AF      (clobbered)
;-------------------------------------------------------------------------------
        ld      A,                      B
        ld      [ypos],                 A
        ld      [dest_y],               A
        ld      [sprites.attrs.1.y],    A
        ld      [sprites.attrs.2.y],    A
        ld      A,                      C
        ld      [xpos],                 A
        ld      [dest_x],               A
        ld      [sprites.attrs.1.x],    A
        add     A,                      8
        ld      [sprites.attrs.2.x],    A
        ret


clearCards:
;===============================================================================
; remove the card sprites held by the cursor, leaving the cursor itself:
; NOTE: sprite-update flag *IS* set by this routine
;
; out:  BC, DE  (preserved)
;       AF, HL  (clobbered)
;-------------------------------------------------------------------------------
        ; address of the third sprite in the local sprite table;
        ; the first two sprites are the hand cursor
        ld      HL,     sprites.attrs.3
        ; because the number of bytes to clear is fixed we can jump into
        ; `fill` at the exact place needed. this is done not only for speed,
        ; but also to preserve BC. the number of bytes to clear is 38 sprites
        ; (cursor sprites are excluded), times 4 bytes per sprite
        ;
        xor     A                       ; (set A to zero)
        call    fill@x{38*_sizeof_Sprite}

        ; set the update flag to upload the sprite
        ; changes to VRAM during the next v-blank
        jp      sprites.update


update:
;===============================================================================
; move the cursor one frame towards its destination:
;
; note that sprite position changes are written to the work RAM
; and this is automatically synced with OAM during vblank
;
; out:  DE      (preserved) -- MUST be preserved during vblank usage
;       HL/BC/A (clobbered)
;-------------------------------------------------------------------------------
        ; calculate the X & Y speed to move the cursor:
        ;
        ld      BC,     0               ; default X (C) & Y (B) speed is zero

        ; calculate X-speed:
        ;-----------------------------------------------------------------------
        ; is the cursor in its intended X-position? the destination X-position
        ; and current X-position are next to each other in RAM; we subtract
        ; them from each other to check for any difference
        ;
        ld      HL,     dest_x          ; begin with destination X addr
        ld      A,      [HL+]           ; read and increment addr to current-X
        sub     A,      [HL]            ; subtract destination-X from current-X
        jr      z,      +               ; if equal, no horizontal movement
        sra     A                       ; limit the maximum speed
        jr      nz,     +               ; if dividing reduced it to zero,
        inc     A                       ; move by at least 1 pixel
+       ld      C,      A               ; remember this "x-speed"

        ; calculate Y-speed:
        ;-----------------------------------------------------------------------
        ; is the cursor in its intended Y-position? the destination Y-position
        ; and current Y-position are next to each other in RAM; we subtract
        ; them from each other to check for any difference
        ;
        inc     L                       ; move to `cursor.dest_y`
        ld      A,      [HL+]           ; read and increment addr to current-Y
        sub     A,      [HL]            ; subtract destination-Y from current-Y
        jr      z,      +               ; if equal, no vertical movement
        sra     A                       ; limit the maximum speed
        jr      nz,     +               ; if dividing reduced it to zero,
        inc     A                       ; move by at least 1 pixel
+       ld      B,      A               ; remember "y-speed"

        ; any movement at all?
        or      C                       ; combine X-speed (C) & Y-speed (A)
        ld      [moving],       A       ; 0 = stopped, !0 = moving
        ret     z                       ; if zero, no movement to be done

        ; move card sprites:
        ;-----------------------------------------------------------------------
        ld      HL,     sprites.attrs.40.attr
-       dec     L                       ; skip sprite display attributes byte
        ld      A,      [HL-]           ; read sprite tile
        and     A,      A               ; (set flags!)
        jr      z,      +               ; stop at the last card sprite
        ld      A,      [HL]            ; read sprite X-position
        add     A,      C               ; add the speed differential
        ld      [HL-],  A               ; update sprite X-position
        ld      A,      [HL]            ; read sprite Y-position
        add     A,      B               ; add the speed differential
        ld      [HL-],  A               ; update sprite Y-position
        jr      -

        ; move the hand cursor: (sprites 1 & 2)
        ;-----------------------------------------------------------------------
+       ld      HL,     xpos
        ld      A,      C
        add     A,      [HL]            ; add distance to current `cursor.xpos`
        ld      [HL],   A               ; update the `cursor.xpos` variable
        ld      [sprites.attrs.1.x],    A
        add     A,      8
        ld      [sprites.attrs.2.x],    A

        ld      HL,     ypos
        ld      A,      B
        add     A,      [HL]            ; add distance to current `cursor.ypos`
        ld      [HL],   A               ; update the `cursor.ypos` variable
        ld      [sprites.attrs.1.y],    A
        ld      [sprites.attrs.2.y],    A

        ; set the update flag to upload the sprite
        ; changes to VRAM during the next v-blank
        jp      sprites.update


moveToTile:
;===============================================================================
; move the cursor to a given tile row/col:
; this is a tile position, NOT pixels
;
; the move isn't instant, it'll move over several frames until it reaches
; its destination. another position can be set even whilst in motion
;
; in:   B       row position to move the cursor to
;       C       column position to move the cursor to
;
; out:  HL, DE  (preserved)
;       AF, BC  (clobbered)
;-------------------------------------------------------------------------------
        ; convert the tile row/col to screen-space pixels
        call    sprites.tilePosToScrXY

        ; offset the cursor a little so that it appears
        ; over the cards rather than on the outside edge
        ; NOTE: assumes user mode!
        ld      A,      5
        add     A,      B
        ld      B,      A
        dec     C

        ; fall-through to set the cursor destination
        ; ...

moveToScrXY:
;===============================================================================
; move the cursor to a specific X/Y position on the screen, in pixels:
;
; the move isn't instant, it'll move over several frames until it reaches
; its destination; another position can be set even whilst in motion
;
; in:   B       Y position to move the cursor to
;       C       X position to move the cursor to
;
; out:  BC      (preserved)
;       HL, DE  (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ld      A,              B
        ld      [dest_y],       A       ; set cursor destination Y-position
        ld      A,              C
        ld      [dest_x],       A       ; set cursor destination X-position
        ret


wait:
;===============================================================================
; wait for the cursor to finish moving:
;-------------------------------------------------------------------------------
-       halt                            ; stop the CPU until an interrupt,
        nop                             ;  typically v-blank, occurs

        ld      A,      [moving]        ; check cursor moving flag
        and     A,      A               ; set CPU flags!
        jr      nz,     -               ; any non-zero value means moving

        ret


;;setCard:
;===============================================================================
; changes the cursor to a card, for example, when making auto-moves:
;
; the cursor's pointer (hand) will disappear and be replaced with the
; given card, which will appear in the new position without animation
;
; in:   A       a card value to replace the cursor with
;       B       new cursor position row (in tiles, not px!)
;       C       new cursor position col (in tiles, not px!)
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
;;        push    AF                      ; preserve card value for now
;;        
;;        ; change the cursor mode, so that
;;        ; the cursor's sprite disappears
;;        call    setModeAuto
;;        ; clear any cards held by the cursor
;;        ; (doesn't touch the cursor)
;;        call    clearCards
;;
;;        ; convert the X/Y tile positions into X/Y screen pixels
;;        call    sprites.tilePosToScrXY
;;        ; the sprite version of a card has a border we need to account for
;;        inc     B                       ; adjust 1px for top-border
;;        inc     C                       ; adjust 1px for left-border
;;
;;        ; place the current cursor in this position so that the destination
;;        ; check will be based upon the card-position, not the old position
;;        ; of the hand sprite
;;        call    setPos
;;
;;        ; because all sprites are in 8x16 mode, we will need to overlap
;;        ; sprites where cards stack in a pile and due to sprite-priority,
;;        ; we have to assign sprites from the top of memory, downards
;;        ; (literally writing the sprite attributes backwards)
;;        ld      HL,     sprites.attrs.40.attr
;;
;;        ; create sprites for the card:
;;        pop     AF
;;        call    cursor.createCard_Top
;;        call    cursor.createCard_Bottom
;;
;;        ; set the update flag to upload the sprite
;;        ; changes to VRAM during the next v-blank
;;        jp      sprites.update