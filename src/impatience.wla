; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; GameBoy hardware definitions
.INC    "gb/gb_cpu.wla"                 NAMESPACE "gb"

.INC    "interrupts.wla"


boot:
;===============================================================================
        di                              ; disable interrupts
        ld      SP,     $dff0           ; locate the stack
        xor     A                       ; (set A to zero)
        ldh     [<$ff26],       A       ; disable sound to save power!
        call    init_interrupts

        ; seed randomizer:
        ld      A,      %10101010       ; it doesn't matter what the number is,
        ldh     [<seed+LO],     A       ;  as long as it isn't zero
        ldh     [<seed+HI],     A

        ; configure LCD:
        ;-----------------------------------------------------------------------
        ld      HL,     LCDC            ; LCD config register;
        ld      A,      [HL]            ; read the current value

        ; we *MUST NOT* disable the LCD (bit7=0) outside of vblank!
        ; even though we want the screen off during initialisation,
        ; we must set the LCD enable bit to 1 at this time and
        ; then wait for vblank to turn it off!
        ;
        ;               %1-------       ; LCD enable
        ;               %--0-----       ; window disabled
        ;               %------0-       ; sprites disabled
        ;               %-------0       ; background disabled 
        ld      A,      %10000000
        ld      [HL],   A               ; write settings to LCD register

        ; since interrupts are currently disabled we'll spin in place until
        ; the LCD status register indicates that we've reached vblank
        ;
-       ldh     A,      [<STAT]         ; read current LCD state
        and     %11                     ; bottom-two bits determine mode
        dec     A                       ; 1 = vblank; -1 and check for 0
        jr      nz,     -               ; not vblank, keep spinning

        ; turn the LCD off
        res     7,      [HL]            ; (this is why we load HL with LCDC)

        ; clear VRAM:
        ;-----------------------------------------------------------------------
        ld      HL,     VRAM
        ld      BC,     8192
        call    zero
        ; clear sprite registers: (OAM)
        ld      HL,     OAM
        ; because the number of bytes to clear is fixed,
        ; we can jump into `fill` at the exact place needed
        call    fill@x{40 * _sizeof_Sprite}

        ; no game is selected:
        ; (this should ensure no unwanted actions
        ;  occur whilst a game is initialising)
        ld      HL,     game.id
        ld      [HL],   0

        ei

        call    sprites.init            ; initialise sprite hardware
        call    cursor.init             ; initialise the cursor
        call    tilemap.init

        ; start / restore the game
        jp      game.boot


zero:
;===============================================================================
; zero-out any area of RAM:
;
; in:   HL      starting address to zero
;       BC      number of bytes to clear (1-based)
;
; out:  BC, A   set to zero by nature of the routine
;       HL      set to the address after the zeroed memory
;       DE      (preserved)
;-------------------------------------------------------------------------------
        ; if the hi-byte is non-zero it's guaranteed that >255 bytes
        ; remain and we can simply zero 255 bytes at a time!
        xor     A                       ; (set A to zero)
        cp      B                       ; (set flags!)
        jp      z,      +

-       call    fill                    ; erase 256 bytes in a stride
        dec     B                       ; one page wiped, any remain?
        jp      nz,     -               ; keep copying until B=0

        ; if the lo-byte is $00 then there are no individual
        ; bytes left to copy, we can exit early
        cp      C
        ret     z

        ; <256 bytes remain:
        ;
        ; we try zero 8 bytes at a time for speed, thus we have
        ; to check for when there's less than 8 bytes remaining
        ;
-       ld      A,      8               ; less than 8-bytes remaining?
        cp      C
        jr      c,      +               ; zero only one byte at a time

        ; zero 8 bytes at a time
        xor     A                       ; (set A to zero)
        ld      [HL+],  A
        ld      [HL+],  A
        ld      [HL+],  A
        ld      [HL+],  A
        ld      [HL+],  A
        ld      [HL+],  A
        ld      [HL+],  A
        ld      [HL+],  A

        dec     C
        jr      nz, -

        ret

+       xor     A                       ; (set A to zero)
-       ld      [HL+],  A
        dec     C
        jr      nz, -
        ret


.SECTION "Fill256"                      ALIGN 256 RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
fill:
;===============================================================================
; writes 256 bytes of RAM with a single value:
; used by `zero` to fast-fill 256 bytes at a time
;
; if the number of bytes needed to be written is constant, you can jump into
; the exact position required, these are marked by `@x...` child-labels with
; the appropriate number of bytes 1-256, e.g. `call fill@x160`
;
; in:   HL      starting address
;       A       value to write
;
; out:  HL      automatically incremented to the next RAM address
;       A       (preserved)
;       BC, DE  (preserved)
;-------------------------------------------------------------------------------
.REPEAT 256     INDEX R
@x{256-R}:
        ld      [HL+],  A
.ENDR   ret
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS


.RAMSECTION "RNG"       SLOT "HRAM"     BITWINDOW 8 RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        seed            WORD            ; random number seed
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS


rnd:
;===============================================================================
; generate a random number in A:
;
; this was adapted directly from:
; <retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html>
;
; out:  A       random-number 0-255
;       BC|DE|HL(preserved)
;-------------------------------------------------------------------------------
        push    HL

        ldh     A,      [<seed+LO]
        ld      L,      A
        ldh     A,      [<seed+HI]
        ld      H,      A
        rra
        ld      A,      L
        rra
        xor     H
        ld      H,      A
        ld      A,      L
        rra
        ld      A,      H
        rra
        xor     L
        ldh     [<seed+LO],     A
        xor     H
        ldh     [<seed+HI],     A

        pop     HL
        ret


;===============================================================================
.INC    "strings.wla"                   ; string & text routines
.INC    "tilemap.wla"                   NAMESPACE "tilemap"
.INC    "menu.wla"                      NAMESPACE "menu"
.INC    "piles.wla"                     NAMESPACE "piles"
.INC    "undo.wla"                      NAMESPACE "undo"
.INC    "tableau.wla"                   NAMESPACE "tableau"
.INC    "sprites.wla"                   NAMESPACE "sprites"
.INC    "cursor.wla"                    NAMESPACE "cursor"

.INC    "game.wla"                      NAMESPACE "game"