; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; the original Game Boy has DMA for sprite attributes, so we modify
; an attribute table in work RAM and copy it to OAM during vblank.
; this table has to be aligned to an 8-bit boundary because the DMA
; register only accepts a hi-byte and assumes $00 for the lo-byte
;
.RAMSECTION "Attrs"     ALIGN 256       RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        attrs           INSTANCEOF Sprite 40            ; (160 bytes)
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

.SECTION "TilesSprites" ALIGN 16        RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.DEF    SPRITE_PALLETE1 %11001100       ; red suits
.DEF    SPRITE_PALLETE2 %01001100       ; black suits, hand cursor

tiles_sprites:
;-------------------------------------------------------------------------------
.INCBIN "build/sprites.2bpp"            FSIZE tiles_sprites__size

.DEF    SPRITE_NONE             $00

; tile indices for the hand cursor:
.DEF    SPRITE_HAND_LHS         $00+2
.DEF    SPRITE_HAND_RHS         $08+2
.DEF    SPRITE_HOLD_LHS         $00+4
.DEF    SPRITE_HOLD_RHS         $08+4
.DEF    SPRITE_MENU_LHS         $00+6
.DEF    SPRITE_MENU_RHS         $08+6

; card back rows 1 & 2, column 1 (left)
.DEF    SPRITE_BACK_12X1        $60+4
; card back rows 1 & 2, column 2 (middle)
.DEF    SPRITE_BACK_12X2        $68+4
; card back rows 1 & 2, column 3 (right)
.DEF    SPRITE_BACK_12X3        $70+4
; card back rows 3 & 4, column 1 (left)
.DEF    SPRITE_BACK_34X1        $60+6
; card back rows 3 & 4, column 2 (middle)
.DEF    SPRITE_BACK_34X2        $68+6
; card back rows 3 & 4, column 3 (right)
.DEF    SPRITE_BACK_34X3        $70+6

; card rows 1 & 2, column 1 (left)
.DEF    SPRITE_CARD_12X1        $10
.DEF    SPRITE_CARD_12X1_A      $10+0
.DEF    SPRITE_CARD_12X1_2      $10+2
.DEF    SPRITE_CARD_12X1_3      $10+4
.DEF    SPRITE_CARD_12X1_4      $10+6
.DEF    SPRITE_CARD_12X1_5      $10+8
.DEF    SPRITE_CARD_12X1_6      $10+10
.DEF    SPRITE_CARD_12X1_7      $10+12
.DEF    SPRITE_CARD_12X1_8      $10+14
.DEF    SPRITE_CARD_12X1_9      $10+16
.DEF    SPRITE_CARD_12X1_10     $10+18
.DEF    SPRITE_CARD_12X1_J      $10+20
.DEF    SPRITE_CARD_12X1_Q      $10+22
.DEF    SPRITE_CARD_12X1_K      $10+24
; card rows 1 & 2, column 2 (middle)
.DEF    SPRITE_CARD_12X2        $28+2
; card rows 1 & 2, column 3 (right)
.DEF    SPRITE_CARD_12X3        $30
.DEF    SPRITE_CARD_12X3_SPD    $30+0
.DEF    SPRITE_CARD_12X3_CLB    $30+2
.DEF    SPRITE_CARD_12X3_HRT    $30+4
.DEF    SPRITE_CARD_12X3_DMD    $30+6
; card rows 3 & 4, column 1 (left)
.DEF    SPRITE_CARD_34X1        $38
.DEF    SPRITE_CARD_34X1_SPD    $38+0
.DEF    SPRITE_CARD_34X1_CLB    $38+2
.DEF    SPRITE_CARD_34X1_HRT    $38+4
.DEF    SPRITE_CARD_34X1_DMD    $38+6
; card rows 3 & 4, column 2 (middle)
.DEF    SPRITE_CARD_34X2        $40
; card rows 3 & 4, column 3 (right)
.DEF    SPRITE_CARD_34X3        $48
.DEF    SPRITE_CARD_34X3_A      $48+0
.DEF    SPRITE_CARD_34X3_2      $48+2
.DEF    SPRITE_CARD_34X3_3      $48+4
.DEF    SPRITE_CARD_34X3_4      $48+6
.DEF    SPRITE_CARD_34X3_5      $48+8
.DEF    SPRITE_CARD_34X3_6      $48+10
.DEF    SPRITE_CARD_34X3_7      $48+12
.DEF    SPRITE_CARD_34X3_8      $48+14
.DEF    SPRITE_CARD_34X3_9      $48+16
.DEF    SPRITE_CARD_34X3_10     $48+18
.DEF    SPRITE_CARD_34X3_J      $48+20
.DEF    SPRITE_CARD_34X3_Q      $48+22
.DEF    SPRITE_CARD_34X3_K      $48+24

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS


init:
;===============================================================================
        ; load sprite tiles to VRAM:
        ;-----------------------------------------------------------------------
        ld      HL,     tiles_sprites   ; set source address
        ld      DE,     VRAM_TILES1     ; set destination VRAM position
        ; number of tiles to copy, 0-based
        ; (each tile is 16-bytes)
        ld      B,      (tiles_sprites__size / 16) - 1
        call    tilemap.copyTiles

        call    clearAttrs              ; clear all sprite attributes
        call    cursor.init             ; configure the cursor

        ; set sprite palettes:
        ;-----------------------------------------------------------------------
        ; TODO: don't apply these until vblank?
        ;
        ld      A,      SPRITE_PALLETE1
        ldh     [<OBP0], A
        ld      A,      SPRITE_PALLETE2
        ldh     [<OBP1], A

        ld      HL,     LCDC
        set     2,      [HL]            ; enable 8x16 sprites
        set     1,      [HL]            ; switch sprites on

        ret


clearAttrs:
;===============================================================================
; clears the working copy of the sprite attributes:
;
; NOTE: does *not* set the update flag! it's assumed that you are intending
; to modify the attribute table after clearing it and don't want the sprites
; to potentially disappear for a frame if vblank interrupts
;-------------------------------------------------------------------------------
        ; clear the update flag to prevent sprite changes
        ; appearing whilst the working sprite table is cleared
        xor     A                       ; (set A to zero)
        ldh     [<update_sprites],      A

        ; because the number of bytes to clear is fixed,
        ; we can jump into `fill` at the exact place needed
        ld      HL,     attrs
        jp      fill@x{SECTIONEND_sprites.Attrs-SECTIONSTART_sprites.Attrs}


tilePosToScrXY:
;===============================================================================
; given a tile row/col, return the position in X/Y on-screen pixels:
; note that this accounts for the tilemap scroll offset
;
; in:   B       tilemap row position
;       C       tilemap column position
;
; out:  B       Y-position on screen (in pixels)
;       C       X-position on screen (in pixels)
;       HL, DE  (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ; multiply row by 8:
        sla     B                       ; x2
        sla     B                       ; x4
        sla     B                       ; x8

        ; subtract the scroll offset:
        ;
        ; the difficulty here is that we can only subtract C from A, and *not*
        ; A from C which is the wrong way around for our numbers. we compensate
        ; for this by inverting and adding instead of subtracting
        ;
        ldh     A,      [<SCY]          ; read Y-scroll register through hi-RAM
        cpl                             ; invert the number (i.e. -A)
        add     A,      B
        add     A,      16              ; account for off-screen sprite space
        ld      B,      A               ; return value back in B

        ; multiply column by 8:
        sla     C                       ; x2
        sla     C                       ; x4
        sla     C                       ; x8
        ; subtract the scroll offset:
        ldh     A,      [<SCX]          ; read X-scroll register through hi-RAM
        cpl                             ; invert the number (i.e. -A)
        add     A,      C
        add     A,      8               ; account for off-screen sprite space
        ld      C,      A               ; return value back in C

        ret


createCard_Top:
;===============================================================================
; create sprites for the top half of a card:
; NOTE: does NOT set the sprite update flag!
;
; in:   A       value of card to render as sprites
;       HL      this must be set to the last byte of the Sprite in the local
;               sprite attribute table to begin building from, i.e. `attr`+
;               (sprite no. * 4) + 3, because sprites are written to the
;               local sprite attribute table in reverse order; both for
;               simplicity and to ensure correct sprite-priority
;       B       screen Y-position (px) to begin building the sprites
;       C       screen X-position (px) to begin building the sprites
;
; out:  HL      the address in the local sprite attr table will have been
;               decremented according to the number of sprites created, so
;               this routine can be called again, or `createCard_Bottom`
;               for the bottom half of the card
;       B       even though the card sprites are 16px high, the Y-position
;               will only be incremeneted by 8 to allow for overlapping cards;
;               `createCard_Bottom` will correct for this automatically
;       C       (preserved) -- the x-pos can be reused for the bottom-half
;       A       (preserved) -- card value is passed out for reuse
;       DE      (preserved)
;-------------------------------------------------------------------------------
        push    DE                      ; preserve DE
        ld      E,      A               ; backup card value

        ; NOTE: the bit in the card value that indicates suit colour directly
        ;       lines up with the palette selection bit in the tile attribute!
        and     MASK_COLOUR
        ld      D,      A               ; keep this in D for re-use

        ;-----------------------------------------------------------------------
        ; top-left corner: ordinal
        ;-----------------------------------------------------------------------
        ld      [HL],   D               ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      E               ; retrieve original card value
        and     MASK_RANK               ; trim out the other bits of card value
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_12X1-2      ; offset the tile with the ordinal
        ld      [HL-],  A               ; set the sprite's tile
        ld      A,      C
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; top-middle:
        ;-----------------------------------------------------------------------
        ld      [HL],   D               ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      SPRITE_CARD_12X2; this one has a fixed sprite tile
        ld      [HL-],  A
        ld      A,      C               ; position this sprite
        add     A,      8               ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; top-right: suit
        ;-----------------------------------------------------------------------
        ld      [HL],   D               ; set sprite display attribute
        dec     L
        ld      A,      E               ; retrieve original card value
        swap    A                       ; move the suit to the bottom nybble
        and     MASK_SUIT >> 4          ; mask out the other bits
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_12X3        ; offset the tile with the suit
        ld      [HL-],  A
        ld      A,      C               ; position this sprite
        add     A,      16              ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        add     A,      8               ; move to the next row
        ld      B,      A               ; return updated Y-position
        ld      A,      E               ; return original card value

        pop     DE                      ; restore DE
        ret


createCard_Bottom:
;===============================================================================
; create sprites for the bottom half of a card:
; NOTE: does NOT set the sprite update flag
;
; in:   A       value of card to be rendered as sprites
;       HL      this must be set to the last byte of the Sprite in the local
;               sprite attribute table to begin building from, i.e. `attr`+
;               (sprite no. * 4) + 3, because sprites are written to the
;               local sprite attribute table in reverse order; both for
;               simplicity and to ensure correct sprite-priority
;       B       screen Y-position (px) to begin building the sprites
;       C       screen X-position (px) to begin building the sprites
;
; out:  HL      the address in the local sprite attr table will have been
;               decremented according to the number of sprites created
;       B       the Y-position is incremeneted by 8 incidentally
;               (even though the sprites created are 16px high)
;       C, DE   (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        push    DE                      ; preserve DE
        ld      E,      A               ; backup card value

        ; NOTE: the bit in the card value that indicates suit colour directly
        ;       lines up with the palette selection bit in the tile attribute!
        and     MASK_COLOUR
        ld      D,      A               ; keep this in D for re-use

        ;-----------------------------------------------------------------------
        ; bottom-left: suit
        ;-----------------------------------------------------------------------
        ld      [HL-],  A               ; set sprite display attribute
        ld      A,      E               ; retrieve original card value
        swap    A                       ; move the suit to the bottom nybble
        and     MASK_SUIT >> 4          ; mask out the other bits
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_34X1        ; offset the tile with the suit
        ld      [HL-],  A
        ld      A,      C
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B               ; since sprites are 8x16,
        add     A,      8               ;  move down another 8px so that
        ld      B,      A               ;  we are 16px below the top-half
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; bottom-middle:
        ;-----------------------------------------------------------------------
        ld      [HL],   D               ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      SPRITE_CARD_34X2; this one has a fixed sprite tile
        ld      [HL-],  A
        ld      A,      C               ; position this sprite
        add     A,      8               ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position
        ;-----------------------------------------------------------------------
        ; bottom-right corner: ordinal
        ;-----------------------------------------------------------------------
        ld      [HL],   D               ; set sprite display attribute
        dec     L                       ; (move to sprite tile byte)
        ld      A,      E               ; retrieve the card value
        and     MASK_RANK               ; trim out the other bits of card value
        rlca                            ; x2 tile index due to 8x16 sprites
        add     SPRITE_CARD_34X3-2      ; offset the tile with the ordinal
        ld      [HL-],  A               ; set the sprite's tile
        ld      A,      C               ; position this sprite
        add     A,      16              ;  next to the previous one
        ld      [HL-],  A               ; write sprite X-position
        ld      A,      B
        ld      [HL-],  A               ; write sprite Y-position

        pop     DE                      ; restore DE
        ret


update:
;===============================================================================
; marks the local sprite attribute table as 'dirty',
; causing it to be DMA'd to the PPU during v-blank:
;
; out:  BC/DE/HL(preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ldh     A,      [<update_sprites]
        set     0,      A
        ldh     [<update_sprites],      A
        ret