; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; the original Game Boy has DMA for sprite attributes, so we modify
; an attribute table in work RAM and copy it to OAM during vblank.
; this table has to be aligned to an 8-bit boundary because the DMA
; register only accepts a hi-byte and assumes $00 for the lo-byte
;
.RAMSECTION "Attrs"     ALIGN 256       RETURNORG
        ;-----------------------------------------------------------------------
        attrs           INSTANCEOF Sprite 40            ; (160 bytes)
.ENDS

.SECTION "TilesSprites" ALIGN 16        RETURNORG
;###############################################################################

.DEF    SPRITE_PALLETE  %01001100

tiles_sprites:
;-------------------------------------------------------------------------------
.INCBIN "build/sprites.2bpp"            FSIZE tiles_sprites__size

; tile indices for the hand cursor:
.DEF    SPRITE_HAND_LHS         $00
.DEF    SPRITE_HAND_RHS         $08
.DEF    SPRITE_HOLD_LHS         $00+2
.DEF    SPRITE_HOLD_RHS         $08+2

; card back rows 1 & 2, column 1 (left)
.DEF    SPRITE_BACK_12X1        $60+4
; card back rows 1 & 2, column 2 (middle)
.DEF    SPRITE_BACK_12X2        $68+4
; card back rows 1 & 2, column 3 (right)
.DEF    SPRITE_BACK_12X3        $70+4
; card back rows 3 & 4, column 1 (left)
.DEF    SPRITE_BACK_34X1        $60+6
; card back rows 3 & 4, column 2 (middle)
.DEF    SPRITE_BACK_34X2        $68+6
; card back rows 3 & 4, column 3 (right)
.DEF    SPRITE_BACK_34X3        $70+6

; card rows 1 & 2, column 1 (left)
.DEF    SPRITE_CARD_12X1        $10
.DEF    SPRITE_CARD_12X1_A      $10+0
.DEF    SPRITE_CARD_12X1_2      $10+2
.DEF    SPRITE_CARD_12X1_3      $10+4
.DEF    SPRITE_CARD_12X1_4      $10+6
.DEF    SPRITE_CARD_12X1_5      $10+8
.DEF    SPRITE_CARD_12X1_6      $10+10
.DEF    SPRITE_CARD_12X1_7      $10+12
.DEF    SPRITE_CARD_12X1_8      $10+14
.DEF    SPRITE_CARD_12X1_9      $10+16
.DEF    SPRITE_CARD_12X1_10     $10+18
.DEF    SPRITE_CARD_12X1_J      $10+20
.DEF    SPRITE_CARD_12X1_Q      $10+22
.DEF    SPRITE_CARD_12X1_K      $10+24
; card rows 1 & 2, column 2 (middle)
.DEF    SPRITE_CARD_12X2        $28+2
; card rows 1 & 2, column 3 (right)
.DEF    SPRITE_CARD_12X3        $30
.DEF    SPRITE_CARD_12X3_SPD    $30+0
.DEF    SPRITE_CARD_12X3_CLB    $30+2
.DEF    SPRITE_CARD_12X3_HRT    $30+4
.DEF    SPRITE_CARD_12X3_DMD    $30+6
; card rows 3 & 4, column 1 (left)
.DEF    SPRITE_CARD_34X1        $38
.DEF    SPRITE_CARD_34X1_SPD    $38+0
.DEF    SPRITE_CARD_34X1_CLB    $38+2
.DEF    SPRITE_CARD_34X1_HRT    $38+4
.DEF    SPRITE_CARD_34X1_DMD    $38+6
; card rows 3 & 4, column 2 (middle)
.DEF    SPRITE_CARD_34X2        $40
; card rows 3 & 4, column 3 (right)
.DEF    SPRITE_CARD_34X3        $48
.DEF    SPRITE_CARD_34X3_A      $48+0
.DEF    SPRITE_CARD_34X3_2      $48+2
.DEF    SPRITE_CARD_34X3_3      $48+4
.DEF    SPRITE_CARD_34X3_4      $48+6
.DEF    SPRITE_CARD_34X3_5      $48+8
.DEF    SPRITE_CARD_34X3_6      $48+10
.DEF    SPRITE_CARD_34X3_7      $48+12
.DEF    SPRITE_CARD_34X3_8      $48+14
.DEF    SPRITE_CARD_34X3_9      $48+16
.DEF    SPRITE_CARD_34X3_10     $48+18
.DEF    SPRITE_CARD_34X3_J      $48+20
.DEF    SPRITE_CARD_34X3_Q      $48+22
.DEF    SPRITE_CARD_34X3_K      $48+24

;###############################################################################
.ENDS


init:
;===============================================================================
        ; copy the sprite tiles to VRAM:
        ld      HL,     tiles_sprites   ; set source address
        ld      DE,     VRAM_TILES1     ; set destination VRAM position
        ; number of tiles to copy, 0-based
        ; (each tile is 16-bytes)
        ld      B,      (tiles_sprites__size / 16) - 1
        call    tilemap.copyTiles

        call    clearAttrs              ; clear all sprite attributes
        call    cursor.init             ; configure the cursor

        ; set sprite palettes:
        ;-----------------------------------------------------------------------
        ld      A,      SPRITE_PALLETE
        ldh     [<OBP0], A
        ld      A,      TILE_PALETTE
        ldh     [<OBP1], A

        ld      HL,     LCDC
        set     2,      [HL]            ; enable 8x16 sprites
        set     1,      [HL]            ; switch sprites on
        
        ret


clearAttrs:
;===============================================================================
; clears the working copy of the sprite attributes:
; this will be uploaded to OAM on the next vblank
;
;-------------------------------------------------------------------------------
        ld      HL,     attrs
        xor     A                       ; (set A to zero)
        
        ; because the number of bytes to clear is fixed,
        ; we can jump into `fill` at the exact place needed
        jp      fill@f{SECTIONEND_sprites.Attrs-SECTIONSTART_sprites.Attrs}


tilePosToScrXY:
;===============================================================================
; given a tile row/col, return the position in X/Y on-screen pixels:
; note that this accounts for the tilemap scroll offset
;
; in:   B       tilemap row position
;       C       tilemap column position
;
; out:  B       Y-position on screen (in pixels)
;       C       X-position on screen (in pixels)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ; multiply row by 8:
        sla     B                       ; x2
        sla     B                       ; x4
        sla     B                       ; x8

        ; subtract the scroll offset:
        ;
        ; the difficulty here is that we can only subtract C from A, and *not*
        ; A from C which is the wrong way around for our numbers. we compensate
        ; for this by inverting and adding instead of subtracting
        ;
        ldh     A,      [<SCY]          ; read Y-scroll register through hi-RAM
        cpl                             ; invert the number (i.e. -A)
        add     A,      B
        add     A,      16              ; account for off-screen sprite space
        ld      B,      A               ; return value back in B

        ; multiply column by 8:
        sla     C                       ; x2
        sla     C                       ; x4
        sla     C                       ; x8
        ; subtract the scroll offset:
        ldh     A,      [<SCX]          ; read X-scroll register through hi-RAM
        cpl                             ; invert the number (i.e. -A)
        add     A,      C
        add     A,      8               ; account for off-screen sprite space
        ld      C,      A               ; return value back in C

        ret


moveCursorToTile:
;===============================================================================
; move the cursor to a given tile row/col:
; this is a tile position, NOT pixels
;
; the move isn't instant, it'll move over several frames until it reaches
; its destination. another position can be set even whilst in motion
;
; in:   B       row position to move the cursor to
;       C       column position to move the cursor to
;
; out:  HL      (preserved)
;       A, BC   (clobbered)
;-------------------------------------------------------------------------------
        ; convert the tile row/col to screen-space pixels
        call    tilePosToScrXY

        ; offset the cursor a little so that it appears
        ; over the cards rather than on the outside edge
        ld      A,      5
        add     A,      B
        ld      B,      A
        dec     C

        ; fall-through to set the cursor destination
        ;

moveCursorToScrXY:
;===============================================================================
; move the cursor to a specific X/Y position on the screen, in pixels:
;
; the move isn't instant, it'll move over several frames until it reaches
; its destination. another position can be set even whilst in motion
;
; in:   B       Y position to move the cursor to
;       C       X position to move the cursor to
;
; out:  BC      (preserved)
;       A, HL   (clobbered)
;-------------------------------------------------------------------------------
        ; update the destination cursor position
        ld      HL,     cursor.dest_x
        ld      [HL],   C               ; set destination X-position
        inc     L
        inc     L
        ld      [HL],   B               ; set distination Y-position
        
        ret