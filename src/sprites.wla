; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; the original Game Boy has DMA for sprite attributes, so we modify
; an attribute table in work RAM and copy it to OAM during vblank.
; this table has to be aligned to an 8-bit boundary because the DMA
; register only accepts a hi-byte and assumes $00 for the lo-byte
;
.RAMSECTION "WorkOAM" \
        SLOT "WRAMLO"   ALIGN 256       RETURNORG
        ;-----------------------------------------------------------------------
        attrs           INSTANCEOF Sprite 40
.ENDS

.RAMSECTION "DoDMA"     SLOT "HRAM"     RETURNORG
        doDMA           DSB 5
.ENDS

.SECTION "tiles_sprites" ALIGN 16
;///////////////////////////////////////////////////////////////////////////////

.DEF    SPRITE_PALLETE          %01001100

; the sprite tiles are orderd *VERTICALLY*, unlike the background tiles!
;
tiles_sprites:
;-------------------------------------------------------------------------------
.INCBIN "build/sprites.2bpp"            FSIZE tiles_sprites__size

; tile indices for the hand sprite:
.DEF    SPRITE_HAND_LHS         $66
.DEF    SPRITE_HAND_RHS         $6e

; card back rows 1 & 2, column 1 (left)
.DEF    SPRITE_BACK_12X1        $68
; card back rows 1 & 2, column 2 (middle)
.DEF    SPRITE_BACK_12X2        $70
; card back rows 1 & 2, column 3 (right)
.DEF    SPRITE_BACK_12X3        $78
; card back rows 3 & 4, column 1 (left)
.DEF    SPRITE_BACK_34X1        $68+1
; card back rows 3 & 4, column 2 (middle)
.DEF    SPRITE_BACK_34X2        $70+1
; card back rows 3 & 4, column 3 (right)
.DEF    SPRITE_BACK_34X3        $78+1

; card rows 1 & 2, column 1 (left)
.DEF    SPRITE_CARD_12X1_A      $00
.DEF    SPRITE_CARD_12X1_2      $08
.DEF    SPRITE_CARD_12X1_3      $10
.DEF    SPRITE_CARD_12X1_4      $18
.DEF    SPRITE_CARD_12X1_5      $20
.DEF    SPRITE_CARD_12X1_6      $28
.DEF    SPRITE_CARD_12X1_7      $30
.DEF    SPRITE_CARD_12X1_8      $38
.DEF    SPRITE_CARD_12X1_9      $40
.DEF    SPRITE_CARD_12X1_10     $48
.DEF    SPRITE_CARD_12X1_J      $50
.DEF    SPRITE_CARD_12X1_Q      $58
.DEF    SPRITE_CARD_12X1_K      $60
; card rows 1 & 2, column 2 (middle)
.DEF    SPRITE_CARD_12X2        $00+2
; card rows 1 & 2, column 3 (right)
.DEF    SPRITE_CARD_12X3_SPD    $48+3
.DEF    SPRITE_CARD_12X3_CLB    $50+3
.DEF    SPRITE_CARD_12X3_HRT    $58+3
.DEF    SPRITE_CARD_12X3_DMD    $60+3
; card rows 3 & 4, column 1 (left)
.DEF    SPRITE_CARD_34X1_SPD    $48+1
.DEF    SPRITE_CARD_34X1_CLB    $50+1
.DEF    SPRITE_CARD_34X1_HRT    $58+1
.DEF    SPRITE_CARD_34X1_DMD    $60+1
; card rows 3 & 4, column 2 (middle)
.DEF    SPRITE_CARD_34X2        $08+2
; card rows 3 & 4, column 3 (right)
.DEF    SPRITE_CARD_34X3_A      $00+4
.DEF    SPRITE_CARD_34X3_2      $08+4
.DEF    SPRITE_CARD_34X3_3      $10+4
.DEF    SPRITE_CARD_34X3_4      $18+4
.DEF    SPRITE_CARD_34X3_5      $20+4
.DEF    SPRITE_CARD_34X3_6      $28+4
.DEF    SPRITE_CARD_34X3_7      $30+4
.DEF    SPRITE_CARD_34X3_8      $38+4
.DEF    SPRITE_CARD_34X3_9      $40+4
.DEF    SPRITE_CARD_34X3_10     $48+4
.DEF    SPRITE_CARD_34X3_J      $50+4
.DEF    SPRITE_CARD_34X3_Q      $58+4
.DEF    SPRITE_CARD_34X3_K      $60+4

;///////////////////////////////////////////////////////////////////////////////
.ENDS

.include        "cursor.wla"    NAMESPACE "cursor"


init:
;===============================================================================
        ; copy the sprite tiles to VRAM:
        ld      HL,     tiles_sprites   ; set source address
        ld      DE,     VRAM_TILES1     ; set destination VRAM position
        ; number of tiles to copy, 0-based
        ; (each tile is 16-bytes)
        ld      B,      (tiles_sprites__size / 16) - 1
        call    tilemap.copyTiles

        call    clearAttrs
        call    cursor.init

        ; set sprite palettes:
        ld      A,      SPRITE_PALLETE
        ld      [OBP0], A
        ld      [OBP1], A

        ld      HL,     LCDC
        set     2,      [HL]            ; enable 8x16 sprites
        set     1,      [HL]            ; switch sprites on
        
        ret


clearAttrs:
;===============================================================================
; clears the working copy of the sprite attributes:
; this will be uploaded to OAM on the next vblank
;
;-------------------------------------------------------------------------------
        ld      HL,     attrs
        ld      BC,     SECTIONEND_sprites.WorkOAM-SECTIONSTART_sprites.WorkOAM
        jp      zero


update:
;===============================================================================
; update sprites (during vblank):
;
;-------------------------------------------------------------------------------
        ; handle the cursor:
        call    cursor.update

        ; DMA the sprite attributes from work RAM into OAM:
        ;
        ; the DMA register only accepts 8-bits, which will
        ; be the hi-byte of the address to copy from
        ld      A,      >sprites.attrs
        
        ; whilst the DMA is occuring the CPU can only access HRAM,
        ; therefore we must initialise the DMA and wait via a routine
        ; running from HRAM. the routine has been copied into HRAM during
        ; `init_interrupts`. B must be set to the number of loop iterations
        ; to wait and C is set to the lo-byte of the DMA register
        ;
        ; despite using the information given here,
        ; <https://gbdev.io/pandocs/OAM_DMA_Transfer.html>,
        ; the BGB emulator would break on bad access during DMA
        ; unless the wait was increased from 40 ($28) to 41!
        ;
        ld      BC,     (41<<8) + <DMA
        call    sprites.doDMA

        ret


tilePosToScrXY:
;===============================================================================
; given a tile row/col, return the position in X/Y on-screen pixels:
; note that this accounts for the tilemap scroll offset
;
; in:   B       tilemap row position
;       C       tilemap column position
;
; out:  B       Y-position on screen (in pixels)
;       C       X-position on screen (in pixels)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        ; multiply row by 8:
        sla     B                       ; x2
        sla     B                       ; x4
        sla     B                       ; x8

        ; subtract the scroll offset:
        ;
        ; the difficulty here is that we can only subtract C from A, and *not*
        ; A from C which is the wrong way around for our numbers. we compensate
        ; for this by inverting and adding instead of subtracting
        ;
        ldh     A,      [<SCY]          ; read Y-scroll register through hi-RAM
        cpl                             ; invert the number (i.e. -A)
        add     A,      B
        add     A,      16              ; account for off-screen sprite space
        ld      B,      A               ; return value back in B

        ; multiply column by 8:
        sla     C                       ; x2
        sla     C                       ; x4
        sla     C                       ; x8
        ; subtract the scroll offset:
        ldh     A,      [<SCX]          ; read X-scroll register through hi-RAM
        cpl                             ; invert the number (i.e. -A)
        add     A,      C
        add     A,      8               ; account for off-screen sprite space
        ld      C,      A               ; return value back in C

        ret