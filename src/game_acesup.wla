; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; create template card piles for the intial setup of the game:
;
;       .---.   .---. .---. .---. .---.
;       |DCK|   | D | | D | | D | | D |
;       |   |   | 1 | | 2 | | 3 | | 4 |
;       '---'   '---' '---' '---' '---'
;       .---.
;       |DSC|
;       |   |
;       '---'
;
.DEF    TYPE_DEPOT_ACESUP       TYPE_COLUMN | RULE_EXPOSED

piles.Begin
        ; label,                type, max-cards,
        ; row,                  col,
        ; pile-left,            pile-right,
        ; pile-up,              pile-down
piles.Define \
        acesup_deck,            TYPE_DECK, 52, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 1, \
        INDEX_DEPOT4,           INDEX_DEPOT1, \
        INDEX_DECK,             INDEX_DECK
piles.Define \
        acesup_discard,         TYPE_DISCARD | RULE_LOCKED, 52, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 1, \
        INDEX_DEPOT4,           INDEX_DEPOT1, \
        INDEX_DECK,             INDEX_DISCARD
piles.Define \
        acesup_depot1,          TYPE_DEPOT_ACESUP, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 5, \
        INDEX_DECK,             INDEX_DEPOT2, \
        INDEX_DEPOT1,           INDEX_DEPOT1
piles.Define \
        acesup_depot2,          TYPE_DEPOT_ACESUP, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 8 \
        INDEX_DEPOT1,           INDEX_DEPOT3, \
        INDEX_DEPOT2,           INDEX_DEPOT2
piles.Define \
        acesup_depot3,          TYPE_DEPOT_ACESUP, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 11 \
        INDEX_DEPOT2,           INDEX_DEPOT4, \
        INDEX_DEPOT3,           INDEX_DEPOT3
piles.Define \
        acesup_depot4,          TYPE_DEPOT_ACESUP, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 14 \
        INDEX_DEPOT3,           INDEX_DECK, \
        INDEX_DEPOT4,           INDEX_DEPOT4


init:
;===============================================================================
        ; setup the tableau layout for the game
        ;-----------------------------------------------------------------------
        ; completely clear the table of cards, both the piles and the storage
        ; pool of all cards on the table. this will also clear the undo buffer
        call    tableau.init
        ; when the piles are cleared,
        ; the cursor's pile must be reallocated
        call    tableau.allocateCursorPile

        ld      BC,     acesup_deck
        call    piles.allocateDeck      ; allocate & shuffle the deck
        call    piles.allocate          ; allocate discard pile

        ; allocate the depots:
        ld      L,      INDEX_DEPOT1    ; (skip `INDEX_HAND`)
        call    piles.allocate
        call    piles.allocate          ; depot 2, 3 & 4 all follow in order,
        call    piles.allocate          ; so we don't need to set L & BC again
        call    piles.allocate

        ;-----------------------------------------------------------------------
        call    tableau.refresh
        call    screenOff
        call    tilemap.refresh
        call    screenOn

        ; everything ready, set this as the current running game
        ld      HL,     game.id
        ld      [HL],   GAME_ACESUP

        ; deal the first four cards automatically
        ;
        call    undo.disable            ; (these won't be undoable)
        call    deal
        call    undo.enable

        ; move the cursor to the first pile
        ld      L,      INDEX_DEPOT1
        jp      tableau.pointToPile


tapCard:
;===============================================================================
; in:   L       index (`INDEX_*`) of pile pointed at
;       A       index of card pointed at in that pile
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        ; which pile was tapped?
        ;
        ; for Aces Up we happen to know that the only column
        ; piles are the depots and those are our main concern
        ld      H,      FIELD_TYPE
        bit     BIT_SQUARE,     [HL]
        jr      nz,     tapCard_deck

        ; fall through to below for
        ; handling depots
        ;

tapCard_depot:
;===============================================================================
; in:   L       index (`INDEX_*`) of pile pointed at
;       A       index of card pointed at in that pile
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        ; tapped on a depot -- only the top-most
        ; card is enabled so auto-play that card:
        ;
        ; we need to compare our card with the
        ; other depots so put its value aside:
        rst     piles.rst_cardAddr      ; get addr (DE) of the card index (A)
        ld      A,      [DE]            ; get value of the card
        and     MASK_VALUE              ; isolate suit+rank bits
        ld      B,      A               ; B = tapped card value
        push    HL                      ; preserve pile (L)

        ; check the depots:
        ;-----------------------------------------------------------------------
        ; is our card lower than any other card of the same suit on top of
        ; the other depots? we don't make an effort to avoid checking the
        ; same depot as our card as it won't be considered lower
        ;
        ; since only Aces Up uses this type of validation (so far), we know
        ; we don't need to check the validation-type of every other pile;
        ; just the first four depots are relevant
        ;
        ; note that once a valid match has been found (c+),
        ; we skip checking the other depots (`call nc, ...`)
        ;
        ld      L,      INDEX_DEPOT1
        call            @cp
        ld      L,      INDEX_DEPOT2
        call    nc,     @cp
        ld      L,      INDEX_DEPOT3
        call    nc,     @cp
        ld      L,      INDEX_DEPOT4
        call    nc,     @cp

        ; if carry is set, the tapped card is the same suit
        ; and lower in rank than another card on the tableau
        ;
        pop     HL                      ; retrieve the source pile again
        jp      c,      discardCard     ; remove card (and check win/loss)

        ; if no card matched, it might still be possible to move the card
        ; to an empty space; look for the next blank space, starting from
        ; the current pile:
        ;
        ; since we need to set E to the destination pile whilst preserving our
        ; source pile (L), we will access the pile data via DE instaed of HL
@blank: ld      D,      FIELD_COUNT

        ; we need to check the next three piles
        ; but wrapping the number around 4 -> 1
        ;
        ld      C,      %00000011       ; (save a few bytes later)
        ld      A,      L               ; start with the current pile
        sub     INDEX_DEPOT1            ; subtract 1st depot's index so that
        inc     A                       ;  the pile no. is 0-3, then add 1
        and     C                       ; mod 4 (0->1->-2>3->0)
        ld      H,      A               ; keep for the next iteration
        ; pile + 1:
        add     INDEX_DEPOT1            ; re-base against the pile indices
        ld      E,      A               ; load this into E for the read
        ld      A,      [DE]            ; read the pile count
        and     A,      A               ; (set flags!)
        jp      z,      shiftCard
        ; pile + 2:
        ld      A,      H               ; retrieve that pile number
        inc     A                       ; move to next pile number
        and     C                       ; wrap-around!
        ld      H,      A               ; keep for the next iteration
        add     INDEX_DEPOT1            ; re-base against the pile indices
        ld      E,      A               ; load this into E for the read
        ld      A,      [DE]            ; read the pile count
        and     A,      A               ; (set flags!)
        jp      z,      shiftCard
        ; pile + 3:
        ld      A,      H               ; retrieve that pile number
        inc     A                       ; move to next pile number
        and     C                       ; wrap-around!
        add     INDEX_DEPOT1            ; re-base against the pile indices
        ld      E,      A               ; load this into E for the read
        ld      A,      [DE]            ; read the pile count
        and     A,      A               ; (set flags!)
        jp      z,      shiftCard

        ; TODO: if there is no match, do some kind of "not valid" animation
        ret

        ;=======================================================================
        ; compare cards:
        ;
        ; given the pile to compare *against*,
        ; fetch the top card of *that* pile
        ;
@cp:    call    piles.getLastCard       ; addr of last card in search depot

        ; if the pile is empty, we can't compare;
        ; (top card is zero; this because index 0 is
        ; the same for zero cards or 1 card in the pile)
        ;
        ld      A,      [DE]            ; read the last card in the pile
        and     A,      A               ; (set flags)
        ret     z                       ; return no-carry for empty pile

        ; compare suits:
        ;
        ; we compare suits using XOR so that carry is
        ; unaffected. if the suits match, zero is set
        ;
        xor     B                       ; combine with the tapped card
        and     MASK_SUIT               ; mask out irrelevant bits
        ret     nz                      ; exit (c-) if they don't match

        ; compare ranks:
        ;
        ; unfortunately we have our registers back-to-front so that,
        ; if were were to put the original rank in C, we'd be looking
        ; for the higher value, not the lower one. do some register
        ; juggling to get the comparison the right way around...
        ;
        ld      A,      [DE]            ; read the last depot card
        sub     2                       ; wrap A low to A high!
        and     MASK_RANK               ; (isolate the rank)
        ld      C,      A               ; swap sides

        ld      A,      B               ; get our original card again
        sub     2                       ; wrap A low to A high!
        and     MASK_RANK               ; (isolate the rank)
        cp      C                       ; if depot card is higher,
        ret                             ;  return carry!


tapCard_deck:
;===============================================================================
; in:   L       index (`INDEX_*`) of pile pointed at
;       A       index of card pointed at in that pile
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        ; is the deck empty?
        rst     piles.rst_pileCount
        ret     z

        ; fallthrough
        ; ...

deal:
;===============================================================================
; deals a card onto each pile:
;
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        ld      E,      INDEX_DEPOT1
        call    tableau.dealCard
        call    undo.chain
        ld      E,      INDEX_DEPOT2
        call    tableau.dealCard
        call    undo.chain
        ld      E,      INDEX_DEPOT3
        call    tableau.dealCard
        call    undo.chain
        ld      E,      INDEX_DEPOT4
        call    tableau.dealCard
        
        jp      checkWinOrLose


discardCard:
;===============================================================================
; move a depot card out of play:
;
; in:   L       source pile index
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        ld      E,      INDEX_DISCARD

        ; fallthrough
        ; ...

shiftCard:
;===============================================================================
; in:   L       source pile index
;       E       destination pile index
; out:  *       (clobbered)
;-------------------------------------------------------------------------------
        call    tableau.moveTopCard

        ; fallthrough
        ; ...

checkWinOrLose:
;===============================================================================
; check the state of the game for a win or lose condition:
;
; for Aces Up, a win occurs when each depot contains 1 Ace each
; (with no other cards), and the deck has been exhausted
;
; a loss occurs when the deck is exhausted but there are no moves
; remaining that can produce the outcome described above
;-------------------------------------------------------------------------------
        ; firstly, in either case, the deck must be exhausted
        ;
        ld      L,      INDEX_DECK
        rst     piles.rst_pileCount     ; number of cards in the deck
        ret     nz                      ; return if deck still has cards

        ; check each depot has a quantity of 1:
        ;
        ld      L,      INDEX_DEPOT1    ; begin with depot 1
        rst     piles.rst_pileCount     ; number of cards in pile
        dec     A                       ; 1 -> 0
        ret     nz                      ; return if pile has <>1 cards
        inc     L                       ; switch to depot 2
        rst     piles.rst_pileCount     ; number of cards in pile
        dec     A                       ; 1 -> 0
        ret     nz                      ; return if pile has <>1 cards
        inc     L                       ; switch to depot 3
        rst     piles.rst_pileCount     ; number of cards in pile
        dec     A                       ; 1 -> 0
        ret     nz                      ; return if pile has <>1 cards
        inc     L                       ; switch to depot 4
        rst     piles.rst_pileCount     ; number of cards in pile
        dec     A                       ; 1 -> 0
        ret     nz                      ; return if pile has <>1 cards

        ; the deck is empty and each pile has one card,
        ; so either a win or loss is now possible
        ;-----------------------------------------------------------------------
        ; check if each card is an Ace
        ;
        ld      L,      INDEX_DEPOT1    ; start with depot 1
        call    piles.getLastCard       ; get last card in the pile
        and     MASK_RANK               ; (ignore suit)
        cp      CARD_A                  ; check if card is an Ace
        jr      nz,     @lose           ; lose if not Ace
        inc     L                       ; switch to depot 2
        call    piles.getLastCard       ; get last card in the pile
        and     MASK_RANK               ; (ignore suit)
        cp      CARD_A                  ; check if card is an Ace
        jr      nz,     @lose           ; lose if not Ace
        inc     L                       ; switch to depot 3
        call    piles.getLastCard       ; get last card in the pile
        and     MASK_RANK               ; (ignore suit)
        cp      CARD_A                  ; check if card is an Ace
        jr      nz,     @lose           ; lose if not Ace
        inc     L                       ; switch to depot 4
        call    piles.getLastCard       ; get last card in the pile
        and     MASK_RANK               ; (ignore suit)
        cp      CARD_A                  ; check if card is an Ace
        jr      nz,     @lose           ; lose if not Ace

@win:   ret

@lose:  ret


;;validatePile:
;===============================================================================
; validate lowest rank of each suit:
;
; in:   L       pile index (`INDEX_*`)
; out:  L       (preserved)
;-----------------------------------------------------------------------------
;;        ; the routine must return the original pile index
;;        ; as it's being used as the counter over all piles
;;        push    HL
;;        
;;        ; validate top-card:
;;        ;=====================================================================
;;        ; since only the top-most card requires specific validation,
;;        ; we start with the last card in the pile
;;        rst     piles.rst_pileCount
;;        ld      C,      A               ; use card count as 1-based counter
;;        dec     A                       ; adjust index to 0-based for access
;;        rst     piles.rst_cardAddr      ; get address of last card into DE
;;
;;        ; we need to compare our card with the other depots;
;;        ; first extract the suit; we can't use the rank yet
;;        ld      A,      [DE]            ; get value of last card
;;        and     MASK_SUIT               ; isolate suit bits
;;        ld      B,      A               ; B = source suit
;;
;;        ; check the depots:
;;        ;---------------------------------------------------------------------
;;        ; is our card lower than any other card of the same suit on top of
;;        ; the other depots? we don't make an effort to avoid checking the
;;        ; same depot as our card as it won't be considered lower
;;        ;
;;        ; since only Aces Up uses this type of validation (so far), we know
;;        ; we don't need to check the validation-type of every other pile;
;;        ; just the first four depots are relevant
;;        ;
;;        ; note that once a valid match has been found (c+),
;;        ; we skip checking the other depots (`call nc, ...`)
;;        ld      L,      INDEX_DEPOT1
;;        call            @cp
;;        ld      L,      INDEX_DEPOT2
;;        call    nc,     @cp
;;        ld      L,      INDEX_DEPOT3
;;        call    nc,     @cp
;;        ld      L,      INDEX_DEPOT4
;;        call    nc,     @cp
;;
;;        ; read the source card value once more
;;        ld      A,      [DE]
;;        ; flip the carry due to the $80->$00
;;        ; ordering of the tiles in VRAM
;;        ccf
;;        ; shift the carry (result bit) into bit 0,
;;        ; pushing the old disabled bit off
;;        rla
;;        ; now rotate the byte back so that bit 0
;;        ; (the new disabled bit) becomes bit 7
;;        rrca
;;        ; finally, update the pile
;;        ; with the validation result
;;        ld      [DE],   A
;;
;;        ; all other cards in the pile are automatically invalid:
;;        ;=====================================================================
;;-       dec     C                       ; decrement card count
;;        jr      z,      +               ; stop once we hit zero
;;        dec     DE                      ; move to the previous card in RAM
;;        ld      A,      [DE]            ; read the card value
;;        or      CARD_DISABLED           ; set the disabled bit
;;        ld      [DE],   A               ; write back the updated card
;;        jr      -
;;
;;+       pop     HL                      ; return original pile index
;;        ret
;;
;;        ;=====================================================================
;;        ; compare cards:
;;        ;
;;        ; given the Pile to compare *against*, fetch the top card
;;        ; of *that* pile. we have to preserve DE whilst doing this
;;        ;
;;@cp:    rst     piles.rst_pileCount     ; number of cards in pile, 1-based
;;        ret     z                       ; skip depot if empty!
;;        dec     A                       ; correct count to 0-based
;;        push    AF
;;        ld      H,      FIELD_POOL_LO   ; switch field
;;        ld      A,      [HL]            ; read pool-addr lo-byte
;;        ld      H,      FIELD_POOL_HI   ; switch field
;;        ld      H,      [HL]            ; read pool-addr hi-byte
;;        ld      L,      A
;;        pop     AF
;;        add     A,      L
;;        ld      L,      A
;;        jr      nc,     +
;;        inc     H
;;+       ld      A,      [HL]            ; read the last card in the pile
;;
;;        ; compare suits:
;;        ;
;;        ; we compare suits using XOR so that carry is
;;        ; unaffected. if the suits match, zero is set
;;        and     MASK_SUIT
;;        xor     B                       ; compare suits
;;        ret     nz                      ; exit if they don't match
;;
;;        ; compare ranks:
;;        ;
;;        ; unfortunately we have our registers back-to-front so that,
;;        ; if were were to put the original rank in C, we'd be looking
;;        ; for the higher value, not the lower one. do some register
;;        ; juggling to get the comparison the right way around...
;;        ;
;;        push    BC
;;
;;        ld      A,      [HL]            ; read the last depot card
;;        sub     2                       ; wrap A low to A high!
;;        and     MASK_RANK               ; (isolate the rank)
;;        ld      C,      A               ; swap sides
;;
;;        ld      A,      [DE]            ; get our original card again
;;        sub     2                       ; wrap A low to A high!
;;        and     MASK_RANK               ; (isolate the rank)
;;
;;        cp      C                       ; if depot card is higher,
;;
;;        pop     BC
;;        ret                             ; return carry!

