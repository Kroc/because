; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;

init:
;===============================================================================
        rst     rst_waitVBlank
        
        ; temp: set scroll offset to move menu off-screen
        ld      A,      MENU_WIDTH * 8
        ldh     [<SCX], A
        xor     A
        ldh     [<SCY], A

        ; setup the playfield for the game
        ;-----------------------------------------------------------------------
        ; completely clear the table of cards, both the piles and the storage
        ; pool of all cards on the table. DE will be set to the beginning
        ; of the storage pool, as needed by the allocation routines
        ;
        call    cards.clear

        ; allocate the deck:
        ld      B,      1               ; row
        ld      C,      MENU_WIDTH + 1  ; column
        call    cards.allocateDeck

        ; allocate the tableau:
        ld      HL,     cards.tableau1
        ld      C,      MENU_WIDTH + 5  ; column, row is re-used
        ld      A,      13              ; max. number of cards
        call    cards.allocatePile

        ; tableau 2, 3 & 4 all follow in order,
        ; so we do not need to set HL again
        ld      C,      MENU_WIDTH + 8  ; column, row is re-used
        call    cards.allocatePile

        ld      C,      MENU_WIDTH + 11 ; column, row is re-used
        call    cards.allocatePile

        ld      C,      MENU_WIDTH + 14 ; column, row is re-used
        call    cards.allocatePile

        ;-----------------------------------------------------------------------
        ld      HL,     cards.tableau1
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        
        ld      A,      CARD_K | SUIT_SPADE
        call    cards.addCard
        ld      A,      CARD_Q | SUIT_HEART
        call    cards.addCard
        ld      A,      CARD_J | SUIT_CLUB
        call    cards.addCard
        ld      A,      CARD_X | SUIT_DIAMOND
        call    cards.addCard
        ld      A,      CARD_9 | SUIT_SPADE
        call    cards.addCard
        ld      A,      CARD_8 | SUIT_HEART
        call    cards.addCard
        ld      A,      CARD_7 | SUIT_CLUB
        call    cards.addCard
        ld      A,      CARD_6 | SUIT_DIAMOND
        call    cards.addCard
        ld      A,      CARD_5 | SUIT_SPADE
        call    cards.addCard
        ld      A,      CARD_4 | SUIT_HEART
        call    cards.addCard
        ld      A,      CARD_3 | SUIT_CLUB
        call    cards.addCard
        ld      A,      CARD_2 | SUIT_DIAMOND
        call    cards.addCard
        ld      A,      CARD_A | SUIT_SPADE
        call    cards.addCard

        ld      HL,     cards.tableau2
        ld      A,      CARD_J | SUIT_HEART
        call    cards.addCard
        ld      HL,     cards.tableau3
        ld      A,      CARD_Q | SUIT_CLUB
        call    cards.addCard
        ;;ld      HL,     cards.tableau4
        ;;ld      A,      CARD_K | SUIT_DIAMOND
        ;;call    cards.addCard

        ;-----------------------------------------------------------------------
        call    playfield.drawDeck
        
        ; NOTE: tableau 1, 2, 3 & 4 follow each other, so each call
        ;       to `draw_pile` moves HL on to the next tableau pile
        ld      HL,     cards.tableau1
        call    playfield.drawPile      ; draw tableau 1
        call    playfield.drawPile      ; draw tableau 2
        call    playfield.drawPile      ; draw tableau 3
        call    playfield.drawPile      ; draw tableau 4

        ;-----------------------------------------------------------------------
        rst     rst_screenOff
        call    tilemap.refresh
        rst     rst_screenOn
        
        ; move the cursor to the bottom card in the first tableau pile
        ld      HL,     cards.tableau1
        ld      A,      3
        call    playfield.pointToCard

        ; play loop:
        ;=======================================================================
@main:  call handleControls

        jp @main


handleControls:
;===============================================================================
; handles controller input:
;
; being a routine, we can just return after processing a button press,
; avoiding an additional jump outside of the switch block
;-------------------------------------------------------------------------------
        ; wait for a button press. this will halt the CPU
        ; between vblanks until a new button is pressed
        call    getButton

        ; cursor down?
        bit     BUTTON_DOWN,    A
        jr      z,      +

        jp      playfield.moveCursorDown

        ; cursor up?
+       bit     BUTTON_UP,      A
        jr      z,      +

        jp      playfield.moveCursorUp

+       ret
