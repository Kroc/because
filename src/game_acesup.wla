; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; create template card piles for the intial setup of the game
;-------------------------------------------------------------------------------
cards.BeginPiles
        ; label,                type, max-cards,
        ; row,                  col,
        ; pile-left,            pile-right,
        ; pile-up,              pile-down
cards.DefinePile \
        acesup_deck,            PILE_DECK, 52, \
        1,                      MENU_WIDTH + 1, \
        cards.depot4,           cards.depot1, \
        cards.deck,             cards.deck
cards.DefinePile \
        acesup_depot1,          PILE_COLUMN, 13, \
        1,                      MENU_WIDTH + 5, \
        cards.deck,             cards.depot2, \
        cards.depot1,           cards.depot1
cards.DefinePile \
        acesup_depot2,          PILE_COLUMN, 13, \
        1,                      MENU_WIDTH + 8 \
        cards.depot1,           cards.depot3, \
        cards.depot2,           cards.depot2
cards.DefinePile \
        acesup_depot3,          PILE_COLUMN, 13, \
        1,                      MENU_WIDTH + 11 \
        cards.depot2,           cards.depot4, \
        cards.depot3,           cards.depot3
cards.DefinePile \
        acesup_depot4,          PILE_COLUMN, 13, \
        1,                      MENU_WIDTH + 14 \
        cards.depot3,           cards.deck, \
        cards.depot4,           cards.depot4


init:
;===============================================================================
        rst     rst_waitVBlank
        
        ; temp: set scroll offset to move menu off-screen
        ld      A,      MENU_WIDTH * 8
        ldh     [<SCX], A
        xor     A
        ldh     [<SCY], A

        ; setup the playfield for the game
        ;-----------------------------------------------------------------------
        ; completely clear the table of cards, both the piles and the storage
        ; pool of all cards on the table. DE will be set to the beginning
        ; of the storage pool, as needed by the allocation routines
        ;
        call    cards.clear

        ; allocate the deck:
        ld      BC,     acesup_deck
        call    cards.allocateDeck

        ; allocate the depots:
        ld      HL,     cards.depot1
        call    cards.allocatePile
        call    cards.allocatePile      ; depot 2, 3 & 4 all follow in order,
        call    cards.allocatePile      ; so we don't need to set HL & BC again
        call    cards.allocatePile

        ;-----------------------------------------------------------------------
        ld      HL,     cards.depot1
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard
        ld      A,      CARD_K | SUIT_SPADE | CARD_BACK
        call    cards.addCard

        ld      A,      CARD_K | SUIT_SPADE
        call    cards.addCard
        ld      A,      CARD_Q | SUIT_HEART
        call    cards.addCard
        ld      A,      CARD_J | SUIT_CLUB
        call    cards.addCard
        ld      A,      CARD_X | SUIT_DIAMOND
        call    cards.addCard
        ld      A,      CARD_9 | SUIT_SPADE
        call    cards.addCard
        ld      A,      CARD_8 | SUIT_HEART
        call    cards.addCard
        ld      A,      CARD_7 | SUIT_CLUB
        call    cards.addCard
        ;;ld      A,      CARD_6 | SUIT_DIAMOND
        ;;call    cards.addCard
        ;;ld      A,      CARD_5 | SUIT_SPADE
        ;;call    cards.addCard
        ;;ld      A,      CARD_4 | SUIT_HEART
        ;;call    cards.addCard
        ;;ld      A,      CARD_3 | SUIT_CLUB
        ;;call    cards.addCard
        ;;ld      A,      CARD_2 | SUIT_DIAMOND
        ;;call    cards.addCard
        ;;ld      A,      CARD_A | SUIT_SPADE
        ;;call    cards.addCard

        ld      HL,     cards.depot2
        ld      A,      CARD_J | SUIT_HEART
        call    cards.addCard
        ld      HL,     cards.depot3
        ld      A,      CARD_Q | SUIT_CLUB
        call    cards.addCard
        ;;ld      HL,     cards.depot4
        ;;ld      A,      CARD_K | SUIT_DIAMOND
        ;;call    cards.addCard

        ;-----------------------------------------------------------------------
        call    playfield.drawDeck
        
        ; NOTE: depot 1, 2, 3 & 4 follow each other, so each call
        ;       to `draw_pile` moves HL on to the next depot pile
        ld      HL,     cards.depot1
        call    playfield.drawPile      ; draw depot 1
        call    playfield.drawPile      ; draw depot 2
        call    playfield.drawPile      ; draw depot 3
        call    playfield.drawPile      ; draw depot 4

        ;-----------------------------------------------------------------------
        rst     rst_screenOff
        call    tilemap.refresh
        rst     rst_screenOn
        
        ; move the cursor to the bottom card in the first depot pile
        ld      HL,     cards.depot1
        call    playfield.pointToPile

        ; play loop:
        ;=======================================================================
@main:  call handleControls

        jp @main


handleControls:
;===============================================================================
; handles controller input:
;
; being a separate routine, we can just return after processing a button press,
; avoiding an additional jump outside of the switch block
;-------------------------------------------------------------------------------
        ; wait for a button press. this will halt the CPU
        ; between vblanks until a new button is pressed
        call    getButton

        ; cursor down?
        bit     BUTTON_DOWN,    A
        jr      z,      +

        jp      playfield.moveCursorDown

        ; cursor up?
+       bit     BUTTON_UP,      A
        jr      z,      +

        jp      playfield.moveCursorUp

        ; cursor left?
+       bit     BUTTON_LEFT,    A
        jr      z,      +

        jp      playfield.moveCursorLeft

        ; cursor right?
+       bit     BUTTON_RIGHT,   A
        jr      z,      +

        jp      playfield.moveCursorRight

+       ret
