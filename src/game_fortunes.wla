; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
.DEF    GAME_FORTUNES   __game_id
.REDEF  __game_id       __game_id+1
.REDEF  __game_priority __game_priority-1

; create template card piles for the intial setup of the game:
;
;       .---. .---. .---. .---. .---. .---.
;       |DCK| |DSC| | F | | F | | F | | F |
;       |   | |   | | 1 | | 2 | | 3 | | 4 |
;       '---' '---' '---' '---' '---' '---'
;       .---. .---. .---. .---. .---. .---.
;       | D | | D | | D | | D | | D | | D |
;       | 1 | | 2 | | 3 | | 4 | | 5 | | 6 |
;       '---' '---' '---' '---' '---' '---'
;       .---. .---. .---. .---. .---. .---.
;       | D | | D | | D | | D | | D | | D |
;       | 7 | | 8 | | 9 | | 10| | 11| | 12|
;       '---' '---' '---' '---' '---' '---'
;
.DEF    PILE_DEPOT_FORTUNES     TYPE_COLUMN | RULE_EXPOSED

piles.Begin
        ; label,                type, max-cards,
        ; row,                  col,
        ; pile-left,            pile-right,
        ; pile-up,              pile-down
piles.Define \
        fortunes_deck,          TYPE_DECK, 52, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 1, \
        INDEX_FOUNDATION4,      INDEX_DISCARD, \
        INDEX_DEPOT7,           INDEX_DEPOT1
piles.Define \
        fortunes_discard,       TYPE_DISCARD, 52, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 4, \
        INDEX_DECK,             INDEX_FOUNDATION1, \
        INDEX_DEPOT8,           INDEX_DEPOT2
;
; foundations:
;
piles.Define \
        fortunes_foundation1,   TYPE_FOUNDATION | RULE_LOCKED, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 7, \
        INDEX_DISCARD,          INDEX_FOUNDATION2, \
        INDEX_DEPOT9,           INDEX_DEPOT3
piles.Define \
        fortunes_foundation2,   TYPE_FOUNDATION | RULE_LOCKED, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 10, \
        INDEX_FOUNDATION1,      INDEX_FOUNDATION3, \
        INDEX_DEPOT10,          INDEX_DEPOT4
piles.Define \
        fortunes_foundation3,   TYPE_FOUNDATION | RULE_LOCKED, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 13, \
        INDEX_FOUNDATION2,      INDEX_FOUNDATION4, \
        INDEX_DEPOT11,          INDEX_DEPOT5
piles.Define \
        fortunes_foundation4,   TYPE_FOUNDATION | RULE_LOCKED, 13, \
        TABLEAU_TOP + 1,        TABLEAU_LEFT + 16, \
        INDEX_FOUNDATION3,      INDEX_DECK, \
        INDEX_DEPOT12,          INDEX_DEPOT6
;
; first row of depots:
;
piles.Define \
        fortunes_depot1,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 1, \
        INDEX_DEPOT6,           INDEX_DEPOT2, \
        INDEX_DECK,             INDEX_DEPOT7
piles.Define \
        fortunes_depot2,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 4, \
        INDEX_DEPOT1,           INDEX_DEPOT3, \
        INDEX_DISCARD,          INDEX_DEPOT8
piles.Define \
        fortunes_depot3,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 7, \
        INDEX_DEPOT2,           INDEX_DEPOT4, \
        INDEX_FOUNDATION1,      INDEX_DEPOT9
piles.Define \
        fortunes_depot4,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 10, \
        INDEX_DEPOT3,           INDEX_DEPOT5, \
        INDEX_FOUNDATION2,      INDEX_DEPOT10
piles.Define \
        fortunes_depot5,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 13, \
        INDEX_DEPOT4,           INDEX_DEPOT6, \
        INDEX_FOUNDATION3,      INDEX_DEPOT11
piles.Define \
        fortunes_depot6,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 7,        TABLEAU_LEFT + 16, \
        INDEX_DEPOT5,           INDEX_DEPOT1, \
        INDEX_FOUNDATION4,      INDEX_DEPOT12
;
; second row of depots:
;
piles.Define \
        fortunes_depot7,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 12,       TABLEAU_LEFT + 1, \
        INDEX_DEPOT12,          INDEX_DEPOT8, \
        INDEX_DEPOT1,           INDEX_DECK
piles.Define \
        fortunes_depot8,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 12,       TABLEAU_LEFT + 4, \
        INDEX_DEPOT7,           INDEX_DEPOT9, \
        INDEX_DEPOT2,           INDEX_DISCARD
piles.Define \
        fortunes_depot9,        PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 12,       TABLEAU_LEFT + 7, \
        INDEX_DEPOT8,           INDEX_DEPOT10, \
        INDEX_DEPOT3,           INDEX_FOUNDATION1
piles.Define \
        fortunes_depot10,       PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 12,       TABLEAU_LEFT + 10, \
        INDEX_DEPOT9,           INDEX_DEPOT11, \
        INDEX_DEPOT4,           INDEX_FOUNDATION2
piles.Define \
        fortunes_depot11,       PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 12,       TABLEAU_LEFT + 13, \
        INDEX_DEPOT10,          INDEX_DEPOT12, \
        INDEX_DEPOT5,           INDEX_FOUNDATION3
piles.Define \
        fortunes_depot12,       PILE_DEPOT_FORTUNES, 1, \
        TABLEAU_TOP + 12,       TABLEAU_LEFT + 16, \
        INDEX_DEPOT11,          INDEX_DEPOT7, \
        INDEX_DEPOT6,           INDEX_FOUNDATION4


; add the game's init address to the table
; used for starting games (see "game.wla")
;
.SECTION "AddrInit_Fortunes"            APPENDTO "*:game.AddrInit" RETURNORG
                                        PRIORITY __game_priority
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
addr_init_fortunes:
;-------------------------------------------------------------------------------
        .ADDR           init
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

init:
;===============================================================================
; start a game of Fortune's Favour:
;-------------------------------------------------------------------------------
        ; setup the tableau layout for the game
        ;-----------------------------------------------------------------------
        ld      BC,     fortunes_deck
        call    piles.allocateDeck      ; allocate & shuffle the deck
        call    piles.allocate          ; allocate discard pile
        ; allocate the foundations:
        ld      L,      INDEX_FOUNDATION1
        call    piles.allocate          ; foundation 1
        call    piles.allocate          ; foundation 2
        call    piles.allocate          ; foundation 3
        call    piles.allocate          ; foundation 4
        ; allocate the depots:
        call    piles.allocate          ; depot 1
        call    piles.allocate          ; depot 2
        call    piles.allocate          ; depot 3
        call    piles.allocate          ; depot 4
        call    piles.allocate          ; depot 5
        call    piles.allocate          ; depot 6
        call    piles.allocate          ; depot 7
        call    piles.allocate          ; depot 8
        call    piles.allocate          ; depot 9
        call    piles.allocate          ; depot 10
        call    piles.allocate          ; depot 11
        call    piles.allocate          ; depot 12

        ; populate sample cards
        ;-----------------------------------------------------------------------
        ld      L,      INDEX_FOUNDATION1
        ld      A,      CARD_A | SUIT_CLUB
        call    piles.pushCard
        ld      L,      INDEX_FOUNDATION2
        ld      A,      CARD_A | SUIT_SPADE
        call    piles.pushCard
        ld      L,      INDEX_FOUNDATION3
        ld      A,      CARD_A | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_FOUNDATION4
        ld      A,      CARD_A | SUIT_DIAMOND
        call    piles.pushCard
        ; depots, first row
        ld      L,      INDEX_DEPOT1
        ld      A,      CARD_6 | SUIT_DIAMOND
        call    piles.pushCard
        ld      L,      INDEX_DEPOT2
        ld      A,      CARD_Q | SUIT_DIAMOND
        call    piles.pushCard
        ld      L,      INDEX_DEPOT3
        ld      A,      CARD_Q | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_DEPOT4
        ld      A,      CARD_J | SUIT_DIAMOND
        call    piles.pushCard
        ld      L,      INDEX_DEPOT5
        ld      A,      CARD_4 | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_DEPOT6
        ld      A,      CARD_X | SUIT_SPADE
        call    piles.pushCard
        ; depots, second row
        ld      L,      INDEX_DEPOT7
        ld      A,      CARD_8 | SUIT_SPADE
        call    piles.pushCard
        ld      L,      INDEX_DEPOT8
        ld      A,      CARD_X | SUIT_DIAMOND
        call    piles.pushCard
        ld      L,      INDEX_DEPOT9
        ld      A,      CARD_9 | SUIT_CLUB
        call    piles.pushCard
        ld      L,      INDEX_DEPOT10
        ld      A,      CARD_3 | SUIT_HEART
        call    piles.pushCard
        ld      L,      INDEX_DEPOT11
        ld      A,      CARD_K | SUIT_CLUB
        call    piles.pushCard
        ld      L,      INDEX_DEPOT12
        ld      A,      CARD_K | SUIT_SPADE
        call    piles.pushCard

        ;-----------------------------------------------------------------------
        call    tableau.refresh
        call    screenOff
        call    tilemap.refresh
        call    screenOn

        ; move the cursor to the card in the first depot pile
        ld      L,      INDEX_DEPOT1
        jp      tableau.pointToPile


; add the game's action address to the table
; used for when a player taps on a card (see "game.wla")
;
.SECTION "AddrAction_Fortunes"          APPENDTO "*:game.AddrAction" RETURNORG
                                        PRIORITY __game_priority
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
addr_action_fortunes:
;-------------------------------------------------------------------------------
        .ADDR           tapCard
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

tapCard:
;===============================================================================
        ret


validatePile:
;===============================================================================
; in:   L       pile index (`INDEX_*`)
; out:  L       (preserved)
;-------------------------------------------------------------------------------
        ; the routine must return the original pile index
        ; as it's being used as the counter over all piles
        push    HL

        ; any card that is one-lower than any
        ; other card of the same rank is valid
        ;
        rst     piles.rst_poolAddr
        ld      L,      INDEX_DEPOT1
        ;-----------------------------------------------------------------------
-       call    @cp                     ; validate against another depot
        jr      c,      +               ; if a match is found, stop searching
        inc     L                       ; move to the next pile
        ld      A,      INDEX_DEPOT12+1 ; check only the twelve depots
        cp      L                       ; have we reached the end?
        jr      nz,     -               ; if not, keep searching
        ;-----------------------------------------------------------------------

        ; read the source card value once more
+       ld      A,      [DE]
        ; flip the carry due to the $80->$00
        ; ordering of the tiles in VRAM
        ccf
        ; shift the carry (result bit) into bit 0,
        ; pushing the old disabled bit off
        rla
        ; now rotate the byte back so that bit 0
        ; (the new disabled bit) becomes bit 7
        rrca
        ; finally, update the pile
        ; with the validation result
        ld      [DE],   A

        pop     HL                      ; return original pile index
        ret

        ; compare card against another pile:
        ;=======================================================================
@cp:    rst     piles.rst_pileCount
        ret     z

        ld      A,      [DE]            ; read source card value
        ld      C,      A               ; put that aside to compare later
        and     MASK_SUIT               ; isolate the suit
        ld      B,      A               ; put that aside too
        push    DE                      ; backup the source card address

        ; compare suits
        ;-----------------------------------------------------------------------
        ; L is the index of the depot to compare against. from this,
        ; get the address (DE) of the first (and only) card
        rst     piles.rst_poolAddr
        ld      A,      [DE]
        and     MASK_SUIT
        xor     B
        jr      nz,     +

        ; compare ranks:
        ;-----------------------------------------------------------------------
        ld      A,      C
        and     MASK_RANK
        ld      C,      A

        ld      A,      [DE]
        and     MASK_RANK
        dec     A
        sub     C
        cp      1

+       pop     DE
        ret