; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
.DEF    GAME_NONE       0

.DEF    __game_id       1
.DEF    __game_priority 1000


.RAMSECTION "Game"                      RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        id              BYTE            ; index of current game being played
        start_seed      WORD            ; starting random seed of current game
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; each game provides a name string for printing;
; this table will be appended to by each game included
;
; the first entry points to the name of the ROM
name:   .str    "impatience"

.SECTION "AddrName"                     RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
addr_name:
;===============================================================================
        .ADDR           name
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; each game defines an address to call to start the game;
; this table will be appended to by each game included
;
.SECTION "AddrInit"                     RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
addr_init:
;===============================================================================
        .ADDR           $0000           ;=GAME_NONE
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; each game defines an address to call when the player taps on a card
; this table will be appended to by each game included
;
; each game defines an address to call to start the game;
; this table will be appended to by each game included
;
.SECTION "AddrAction"                   RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
addr_action:
;===============================================================================
        .ADDR           $0000           ;=GAME_NONE
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; include the games:
; the order of these includes determines their IDs!
;
.INC    "game_acesup.wla"               NAMESPACE "acesup"
.INC    "game_fortunes.wla"             NAMESPACE "fortunes"
.INC    "game_klondike.wla"             NAMESPACE "klondike"


boot:
;===============================================================================
; first time initialisation of the game loop:
; 
; this routine is only called once after power-on; it's intended to handle
; either the first time the ROM is played or to restore state from SRAM
;-------------------------------------------------------------------------------
        ld      A,      GAME_ACESUP
        call    start_new
        jp      play


start_new:
;===============================================================================
; start a game with a new random seed:
;
; WARNING: THIS ROUTINE WILL RETURN! this is so that changing the game
; from the menu can start a new game and return to the input loop without
; inflating the stack (or having to manually reset it)
;
; in:   A       ID of game to start (`GAME_*`)
;-------------------------------------------------------------------------------
        ld      [id],   A               ; set game ID (Klondike, AcesUp &c.)

        call    rnd                     ; randomise once

        ; when starting a game, remember the current RNG seed
        ; -- this will be reused to replay the game with the same cards
        ldh     A,      [<seed+LO]
        ld      [start_seed+LO], A
        ldh     A,      [<seed+HI]
        ld      [start_seed+HI], A

        ld      A,      [id]

        ; fallthrough
        ; ...
        
start_old:
;===============================================================================
; start a game with the same random seed:
;
; WARNING: THIS ROUTINE WILL RETURN!
; this is so that changing the game from the menu can start a new game
; and return to the input loop without inflating the stack (or having
; to manually reset it)
;
; in:   A       ID of game to start (`GAME_*`)
;-------------------------------------------------------------------------------
        ld      [id],   A               ; set the game ID

        ; restore the random seed from the backup
        ; made when starting the game the first time
        ld      A,      [start_seed+LO]
        ldh     [<seed+LO],     A
        ld      A,      [start_seed+HI]
        ldh     [<seed+HI],     A

        ; fallthrough
        ; ...

init:
;===============================================================================
; initialise gameplay:
;-------------------------------------------------------------------------------
        ; completely clear the table of cards, both the piles and the storage
        ; pool of all cards on the table. this will also clear the undo buffer
        call    tableau.init
        ; when the piles are cleared,
        ; the cursor's pile must be reallocated
        call    tableau.allocateCursorPile
        ; move the menu off-screen
        call    menu.hide

        ; start the specific game based on game ID:
        ld      A,      [id]
        ld      HL,     addr_init
        ; JP is used instead of RST to do a tail-call
        jp      rst_jumpTable


play:
;===============================================================================
-       call    handleControls
        jr      -


handleControls:
;===============================================================================
; handles controller input:
;
; being a separate routine, we can just return after processing a button press,
; avoiding an additional jump outside of the switch block
;-------------------------------------------------------------------------------
        ; wait for a button press. this will halt the CPU
        ; between vblanks until a new button is pressed
        call    getButton

        bit     BUTTON_DOWN,    A       ; cursor down?
        jp      nz,     tableau.cursorDown
        bit     BUTTON_UP,      A       ; cursor up?
        jp      nz,     tableau.cursorUp

        bit     BUTTON_LEFT,    A       ; cursor left?
        jp      nz,     tableau.cursorLeft
        bit     BUTTON_RIGHT,   A       ; cursor right?
        jp      nz,     tableau.cursorRight
        bit     BUTTON_B,       A       ; B button?
        jp      nz,     doAction
        bit     BUTTON_A,       A       ; A button?
        jp      nz,     doUndo
        bit     BUTTON_START,   A       ; START button?
        ret     z

        ; show in-game menu:
        ;-----------------------------------------------------------------------
        ; TODO: when cards are in hand, these must be hidden
        ;       and then restored when the menu is closed
        ; TODO: also, handle if mid-animation when this happens!
        ;       (wait until move is complete?)
        ;
@menu:  call    menu.setMainMenu        ; (standard menu)
        call    tilemap.update          ; queue up tile changes
        call    waitVBlank              ; wait for vblank for the redraw

        ; enter the menu; execution will hold there until
        ; the menu is cancelled or an option is selected
        call    menu.show

        ; check menu return value:
        ; 0 = menu was cancelled...
        and     A,      A               ; (set flags!)
        jr      z,      @cancel         ; =0? return to the game in progress

        ; menu item activated:
        ;
        dec     A                       ; menu item 1?
        jr      z,      @menu1
        dec     A                       ; menu item 2?
        jr      z,      @menu2
        dec     A                       ; menu item 3?
        jr      z,      @menu3
        dec     A                       ; menu item 4?
        jr      z,      @menu4

        ; a menu item selected we don't have code for!
        ld      B,B                     ; (break in emulator)
-       jr      -

        ; deal new:
        ;-----------------------------------------------------------------------
@menu1: ld      A,      [id]            ; type of current game
        jp      start_new               ; deal a new game

        ; retry same:
        ;-----------------------------------------------------------------------
@menu2: ld      A,      [id]            ; type of current game
        jp      start_old               ; retry same deal

@menu3:
@menu4:

        ; menu cancelled:
        ;-----------------------------------------------------------------------
        ; restore the cursor to where it was before opening the menu
        ;
@cancel:call    tableau.resetCursorMode
        rst     tableau.rst_getPointPile
        jp      tableau.pointToPile


doAction:
;===============================================================================
; action button pressed; defer action to the specific game:
;-------------------------------------------------------------------------------
        ; retrieve the pile being pointed at (L)
        ; and the card-index (A) in that pile
        rst     tableau.rst_getPointPile
        ; parameters will be passed to the game via DE
        ld      D,      A               ; D = card-index (A)
        ld      E,      L               ; E = pile-index (L)
        ld      HL,     addr_action     ; table of game's `do_action` routines
        ld      A,      [id]            ; ID of currently running game
        ; (instead of using an RST instruction,
        ;  JP is used to do a tail-call)
        jp      rst_jumpTable           ; call game's `do_action` routine


doUndo:
;===============================================================================
; undoes the last move:
;-------------------------------------------------------------------------------
        call    undo.pop                ; retrieve the last move
        ret     c                       ; return if buffer empty

        call    undo.disable            ; don't add the move back
        call    tableau.movePileUndo    ;  to the undo buffer!
        call    undo.enable

        call    undo.isChained          ; check if the next undo is "chained"
        jr      nz,     doUndo          ; if so, also undo that

        ret