; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
.BANK 0

.SECTION        "z80_rst_00"    SIZE 8
;///////////////////////////////////////////////////////////////////////////////

rst_waitVBlank:                                                         ;$00
;===============================================================================
; NOTE: this routine *must* be exactly 8-bytes -- no more, no less
;       -- due to the fall-through to the next routine
;-------------------------------------------------------------------------------
        ld      A,      [IRQ_ENABLE]    ;+3=3
        or      A,      IE.vblank       ;+2=5
        ld      [IRQ_ENABLE],   A       ;+3=8

;///////////////////////////////////////////////////////////////////////////////
.ENDS

.SECTION        "z80_rst_08"    SIZE 8
;///////////////////////////////////////////////////////////////////////////////

rst_haltVBlank:                                                         ;$08
;===============================================================================
        ;                               ; bytes:
        ; stop the CPU until an interrupt occurs!
	; (this will save battery life)
-       halt                            ;+1=1
        ; read the IRQ flags register at $FF0F:
        ; (using HRAM instruction saves 1 byte over `ld A, [IRQ_FLAGS]`,
        ;  this is required to fit within the max. 8-bytes we have here!)
        ldh     A,      [<IRQ_FLAGS]    ;+2=3
        ; was it a v-blank interrupt? (bit 0)
        bit     0,      A               ;+2=5
        ; if not, wait again...
        jr      nz,     -               ;+2=7

        ; we are now in v-blank!
        ret                             ;+1=8

;///////////////////////////////////////////////////////////////////////////////
.ENDS

.SECTION        "z80_rst_10"    SIZE 8
;///////////////////////////////////////////////////////////////////////////////

rst_screenOn:                                                           ;$10
;===============================================================================
; turn the LCD on
;-------------------------------------------------------------------------------
	ldh	A,	[<LCDC]
	set 	7,	A
	ldh 	[<LCDC],A
	ret

;///////////////////////////////////////////////////////////////////////////////
.ENDS

.SECTION        "z80_rst_18"    SIZE 8
;///////////////////////////////////////////////////////////////////////////////

rst_screenOff:                                                          ;$18
;===============================================================================
; turn the LCD off. we must only do this during v-blank or risk damaging
; real hardware! therfore, we wait for v-blank to occur first:
;
;-------------------------------------------------------------------------------
	rst     rst_waitVBlank
        ldh	A,	[<LCDC]
	res 	7,	A
	ldh 	[<LCDC],A
	ret

;///////////////////////////////////////////////////////////////////////////////
.ENDS

; overwrite the GameBoy v-blank interrupt entry-point:
; this area only provides 8 bytes free before the next IRQ ($48),
; so we only have room to jump to a bigger routine
;
.SECTION        "gb_vblank"
;///////////////////////////////////////////////////////////////////////////////
        jp      irq_vblank
;///////////////////////////////////////////////////////////////////////////////
.ENDS

.SECTION        "irq_vblank"    FREE
;///////////////////////////////////////////////////////////////////////////////

irq_vblank:
;===============================================================================
        push    AF
        push    BC
        push    HL

        ;;ld      HL,     OBP0
        ;;swap    [HL]
        
        call    cursor.update

        ;-----------------------------------------------------------------------
        ; no more work to be done,
        ; disable v-blank interrupts
        ;;ld	HL,	IRQ_ENABLE
	;;res	0,	[HL]
        
        pop     HL
        pop     BC
        pop     AF
        reti

;///////////////////////////////////////////////////////////////////////////////
.ENDS