; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2022:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
.BANK 0

;;.RAMSECTION "HRAM"      SLOT "HRAM"     RETURNORG
;;        ;---------------------------------------------------------------------
;;        IRQ_LCDC        BYTE            ; shadow LCD control register
;;        IRQ_SCY         BYTE            ; shadow scroll-Y register
;;        IRQ_SCX         BYTE            ; shadow scroll-X register
;;        IRQ_BGP         BYTE            ; shadow background-palette register
;;        IRQ_OBP0        BYTE            ; shadow object-palette 0 register
;;        IRQ_OBP1        BYTE            ; shadow object-palette 1 register
;;.ENDS

; a few bytes in HRAM need to be reserved to hold a wait loop
.RAMSECTION "DoDMA"     SLOT "HRAM"     RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        doDMA           DSB 5
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; since we cannot modify VRAM during the display period,
; changes are queued up and then applied during vblank
;
.STRUCT TileUpdate
        vram_addr       WORD
        tile            BYTE
        flags           BYTE
.ENDST

; this is the maximum number of tiles that can be updated during v-blank
; without overrunning the VRAM access window. technically this can be increased
; to 40 but there might not be time for the sprite DMA afterwards
.DEF    QUEUE_SIZE      32

; (NOTE: we rely on this starting at an $xx00 address for optimisation)
;
.RAMSECTION "Queue"     ALIGN 256       RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        tile_queue      INSTANCEOF TileUpdate QUEUE_SIZE
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

.RAMSECTION "QReady"    SLOT "HRAM"     RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ; a flag to indicate that tiles are waiting to be processed
        update_tiles    BYTE
        ; a flag to mark when sprite changes are ready to be uploaded,
        ; to avoid a partial-change when vblank interrupts work
        update_sprites  BYTE
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; these are the *logical* button constants for the game, not the ones used by
; the hardware, which are split across two bytes. these are `bit` numbers
;
.DEF    BUTTON_RIGHT    0
.DEF    BUTTON_LEFT     1
.DEF    BUTTON_UP       2
.DEF    BUTTON_DOWN     3
.DEF    BUTTON_A        4
.DEF    BUTTON_B        5
.DEF    BUTTON_SELECT   6
.DEF    BUTTON_START    7

; RAM for remembering joypad state:
;
.RAMSECTION "Joypad"            RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ; which buttons have been *pressed* this frame
        joy_state       BYTE
        ; the current button held state: this is a bitmap of which buttons
        ; are currently *held*. this is not the same thing as the press state
        ; above that only indicates the initial press of a button and not the
        ; contiunous held state, avoiding unwanted rapid-fire
        joy_held        BYTE
        ; button state from the previous frame: this is used to register
        ; a button press, but prevent a button being held from rapid-firing
        joy_prev        BYTE
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; overwrite the GameBoy v-blank interrupt entry-point:
; this area only provides 8 bytes free before the next IRQ ($48),
; so we only have room to jump to a bigger routine
;
.SECTION "irq_vblank"                   RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ; various documentation says that an IRQ takes 20 cycles        ;+20=20
        ; (note the relative jump to save 4 cycles over JP)
        jr      irq_vblank                                              ;+12=34
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

; we place the IRQ handler as low down as possible to allow
; for the relative jump from the IRQ vector to save 4 cycles :P
.ORGA   $61


irq_vblank:                                                                ;=34
;===============================================================================
        ; * * * start of time-critical code * * *
        ;-----------------------------------------------------------------------
        push    AF                                                      ;+16=50
        push    BC                                                      ;+16=66
        push    HL                                                      ;+16=82

        ; any tile updates?
        ;=======================================================================
        ldh     A,      [<update_tiles]                                 ;+12=94
        and     A,      A               ; (set flags!)                  ;+4 =98
        jr      z,      @skip                                           ;+8 =106

        ; backup current stack pointer: we don't use HL during the
        ; tile-writing so we don't need to write the old SP to RAM!
        ld      HL,     SP+0                                            ;+12=118
        ld      SP,     tile_queue                                      ;+8 =126

        ;-----------------------------------------------------------------------
        ; read tiles and write to VRAM:
-       pop     BC                      ; pop VRAM address from queue   ;+12=12
        pop     AF                      ; pop tile / CPU flags          ;+12=24
        ld      [BC],   A               ; write tile to VRAM            ;+8 =32
        jr      z,      -               ; end of queue?                 ;+12=44

        ; restore original stack pointer
        ld      SP,     HL                                              ;+8
        ;-----------------------------------------------------------------------

        ; mark the queue as done (don't process the same tile-queue twice)
        ; note that A is already zero by nature of the loop exit condition!
        ldh     [<update_tiles],        A

        ; DMA the sprite attributes from work RAM into OAM:
        ;=======================================================================
        ; any sprite updates?
@skip:  ld      HL,     update_sprites
        bit     0,      [HL]
        jr      z,      @cursor

        ; clear the sprite update flag
        ; we do this now because A happens to be zero!
        ld      [HL],   A

        ; the DMA register only accepts 8-bits, which will
        ; be the hi-byte of the address to copy from
        ld      A,      >sprites.attrs

        ; whilst the DMA is occuring the CPU can only access HRAM, therefore
        ; we must initialise the DMA and wait via a routine running from HRAM.
        ; the routine has been copied into HRAM during `init_interrupts`.
        ; B must be set to the number of loop iterations to wait, and
        ; C is set to the lo-byte of the DMA register
        ;
        ; despite using the information given here,
        ; <https://gbdev.io/pandocs/OAM_DMA_Transfer.html>,
        ; the BGB emulator would break on bad access during DMA
        ; unless the wait was increased from 40 ($28) to 41!
        ;
        ld      BC,     (41<<8) + <DMA
        call    doDMA                   ; this is in HRAM!
        ;-----------------------------------------------------------------------
        ; * * * end of time-critical code * * *
        ;
        ; move the cursor one frame towards its destination
@cursor call    cursor.update

        ; read the joypad:
        ;=======================================================================
        ; this is where the logical joypad state is stored that the game uses;
        ; the game code never talks directly to the joypad hardware
        ld      HL,     joy_state

        ; read d-pad state:
        ;-----------------------------------------------------------------------
        ; first we WRITE a bit to filter either dpad or buttons
        ld      A,      JOYP.dpad
        ldh     [<JOYP],        A
        ; READ to get the dpad state. an emulator will give you an instant
        ; result but real hardware is said to "take a few cycles" to settle;
        ; the original DMG bricks have *very* noisy circuits
        ;
        ; TODO: test on real hardware: DMG, GBC, GBA, DS
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        cpl     A
        and     A,      %00001111       ; mask out the other/unused bits
        ld      B,      A               ; retain the dpad state (lo-nybble)

        ; read button state:
        ;-----------------------------------------------------------------------
        ; first we WRITE a bit to filter either dpad or buttons
        ld      A,      JOYP.buttons
        ldh     [<JOYP],        A
        ; READ to get the buttons state. an emulator will give you an instant
        ; result but real hardware is said to "take a few cycles" to settle;
        ; the original DMG bricks have *very* noisy circuits
        ;
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        ldh     A,      [<JOYP]
        cpl     A
        and     A,      %00001111       ; mask out the other/unused bits
        swap    A                       ; buttons go in the hi-nybble
        or      A,      B               ; combine with the lo-nybble,
        ld      B,      A

        ; soft reset? a convenience feature in *many* games, and expected by
        ; default nowadays in any homebrew; press A+B+SELECT+START to reboot
        ; the game without having to power-cycle (or use the flash cart menu)
        ;
        cp      2^BUTTON_START | 2^BUTTON_SELECT | 2^BUTTON_A | 2^BUTTON_B
        jp      z,      init

        ld      [HL],   A

        ; TODO: detect button changes:
        ;-----------------------------------------------------------------------
        ; truth table:
        ;
        ; prev: next:   new press?
        ; 0     0       0 
        ; 0     1       1 (pressed)
        ; 1     1       0
        ; 1     0       0 (released)
        ;
        ld      A,      [joy_prev]

        ;-----------------------------------------------------------------------
        ; no more work to be done,
        ; disable v-blank interrupts
        ;;ld	HL,	IRQ_ENABLE
        ;;res	0,	[HL]

        pop     HL
        pop     BC
        pop     AF
        reti


; any additional code must go at $0150 onwards as the Nintendo
; header occupies $0100-$014F and we can't overwrite that
.ORGA   $150


waitVBlank:
;===============================================================================
        ld      A,      [IRQ_ENABLE]
        or      A,      IE.vblank
        ld      [IRQ_ENABLE],   A

        ; fallthrough
        ; ...

haltVBlank:
;===============================================================================
        ; stop the CPU until an interrupt occurs!
        ; (this will save battery life)
-       halt
        ; some documentation says that a hardware bug
        ; can cause the instruction after HALT to be missed
        nop

        ldh     A,      [<IRQ_FLAGS]    ; read the IRQ flags register at $FF0F
        bit     0,      A               ; was it a v-blank interrupt? (bit 0)
        jr      nz,     -               ; if not, wait again...
        ;-----------------------------------------------------------------------
        ret                             ; we are now in v-blank!


screenOn:
;===============================================================================
; turn the LCD on:
;-------------------------------------------------------------------------------
        ; (using HRAM instruction saves 1 byte over `ld A, [LCDC]`,
        ldh     A,      [<LCDC]
        set     7,      A
        ldh     [<LCDC],A
        ret


screenOff:
;===============================================================================
; turn the LCD off. we must only do this during v-blank or risk damaging
; real hardware! therefore, we wait for v-blank to occur first:
;-------------------------------------------------------------------------------
        call    waitVBlank
        ldh     A,      [<LCDC]
        res     7,      A
        ldh     [<LCDC],A
        ret


init_interrupts:
;===============================================================================
        ; clear the interrupt registers:
        ; we don't want unexpected interrupts firing due to
        ; dirty state (e.g. device was rebooted mid-game)
        ;
        xor     A                       ; (sets A to 0)
        ldh     [<IRQ_ENABLE],   A      ; disallow each type of interrupt
        ldh     [<IRQ_FLAGS],    A      ; clear any 'pending' interrupts

        ; clear interrupt handler work-RAM
        ld      HL,     SECTIONSTART_Joypad
        ld      [HL+],  A               ; (note A = 0)
        ld      [HL+],  A
        ld      [HL+],  A

        ; write the DMA routine into HRAM:
        ;-----------------------------------------------------------------------
        ld      C,      <doDMA
        ld      B,      5               ; size of DMA routine
        ld      HL,     @dma
-       ld      A,      [HL+]
        ldh     [C],    A
        inc     C
        dec     B
        jr      nz, -

        ret

        ; this is the DMA routine in HRAM:
        ;=======================================================================
        ; send the lo-byte of the address to copy from (A)
        ; to the DMA register $FF00+C(=$46)
@dma:   ldh     [C],    A
        ; wait for DMA to complete...
-       dec     B                       ; decrement wait counter
        jr      nz, -                   ; keep waiting?
        ret


getButton:
;===============================================================================
; wait for a button press and return it:
;
; note that this waits first for any current buttons to be released
; before waiting again for a fresh button press
;
; out:  A       the current `joy_state` value
;       *       all other registers are preserved
;-------------------------------------------------------------------------------
        ; wait for button release; this game doesn't continue to move if you
        ; hold a button as the cursor snaps to cards and doesn't move freely
        ;
        ; stop the processor; the vblank will awaken it again, where upon
        ; the screen will be updated and the buttons will be read
-       call    waitVBlank
        ld      A,      [joy_state]
        and     A,      A               ; set flags!
        jr      nz,     -               ; spin for button pressed

        ; wait for a new button press:
-       call    waitVBlank
        ld      A,      [joy_state]
        and     A,      A               ; set flags!
        jr      z,     -                ; spin for no button pressed

        ret


clearQueue:
;===============================================================================
; empty the tile-update queue, used to defer VRAM changes to vblank:
;
; out:  A, HL   (clobbered)
;-------------------------------------------------------------------------------
        ; ready flag must be cleared first so that VRAM tile updates
        ; do not occur whilst we are erasing the tile queue!
        xor     A                       ; (set A to zero)
        ldh     [<update_tiles],A
        ; erase the queue
        ld      HL,     tile_queue
        ; because the number of bytes to clear is fixed,
        ; we can jump into `fill` at the exact place needed
        jp      fill@x{_sizeof_tile_queue}