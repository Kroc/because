; impatience <github.com/kroc/impatience> copyright (c) Kroc Camen 2020-2023:
; creative commons attribution (cc-by) 4.0, see LICENSE.txt
;
; for brevity, the undo buffer doesn't store every card moved but instead
; the source & destination pile indices and the starting card index; however
; the move required to undo the change is stored instead of the actual action
; taken -- therefore the undo buffer is a list of pile moves to do that reverse
; the actions that were taken by the player!
;
.RAMSECTION "Undo"                      RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ; we only want to record the card movements between piles, not the
        ; moves to/from the cursor's hand, so we need somewhere to remember
        ; the details after picking up cards until the cards have been dropped
        tmp_src         BYTE
        tmp_dst         BYTE
        tmp_idx         BYTE

        disabled        BYTE            ; flag to ignore adding undo moves
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

.RAMSECTION "UndoBuff"                  ALIGN 256 RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        undo_src        DSB 256
        undo_dst        DSB 256
        undo_idx        DSB 256
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS


init:
;===============================================================================
clear:
;===============================================================================
; clear the undo buffer:
;-------------------------------------------------------------------------------
        xor     A                       ; (set A to zero)
        ld      [tmp_src],      A
        ld      [tmp_dst],      A
        ld      [tmp_idx],      A
        ld      [disabled],     A       ; clear disabled flag

        ld      HL,     SECTIONSTART_undo.UndoBuff
        call    fill                    ; clear undo moves, source piles
        call    fill                    ; clear undo moves, dest. piles
        jp      fill                    ; clear undo moves, card indices


enable:
;===============================================================================
; enable pushing/popping moves to/from the undo buffer:
;
; out:  *       (preserved)
;-------------------------------------------------------------------------------
        push    AF

        xor     A                       ; set A to zero
        ld      [disabled],     A

        pop     AF
        ret


disable:
;===============================================================================
; surpress pushing/popping moves to/from the undo buffer:
;
; out:  *       (preserved)
;-------------------------------------------------------------------------------
        push    AF

        ld      A,      %11111111
        ld      [disabled],     A

        pop     AF
        ret


push:
;===============================================================================
; adds a move to the undo buffer:
;
; the undo data must already be set in the variables
; `tmp_src`, `tmp_dst` & `tmp_idx`
;
; out:  HL, DE  (preserved)
;       A, BC   (clobbered)
;-------------------------------------------------------------------------------
        ; if undo is surpressed, do nothing:
        ;
        ld      A,      [disabled]      ; check undo-disabled flag
        and     A                       ; (set flags!)
        ret     nz                      ; exit if flag is non-zero

        ; sanity check: ignore if source & destination are the same;
        ; this can happen if you pick up cards from a pile and drop
        ; them back on the same pile
        ;
        ld      A,      [tmp_src]       ; undo source pile
        ld      C,      A
        ld      A,      [tmp_dst]       ; undo destination pile
        cp      C                       ; one and the same?
        ret     z                       ; return early if same

        ; shift the whole buffer down:
        ;-----------------------------------------------------------------------
        push    HL                      ; preserve incoming HL
        
        ; whilst we could copy each field, shifting the entire block of RAM
        ; down has almost the same effect as even though the top-most entry
        ; of some fields will be populated with the end of another field,
        ; we'll be overwriting the top-most field anyway
        ;
        ; we'll be copying the 2nd to last byte to
        ; the last byte, removing the bottom-most entry
        ld      HL,     SECTIONEND_undo.UndoBuff-2
        ; and then walking up the buffer towards the top, effectively moving
        ; all entries down one byte and freeing up the top-most entry
        ;
        ld      C,      0               ; loop counter (256, underflows first)
        jr      +                       ; do one less byte (top-most!)
        ;-----------------------------------------------------------------------
-       ld      A,      [HL+]           ; read 2nd-to-last byte & move to last
        ld      [HL-],  A               ; write to last byte and move back
        dec     HL                      ;  twice to make 2nd-to-last into last
+       ld      A,      [HL+]           ;
        ld      [HL-],  A               ; (this is repeated three times
        dec     HL                      ;  so that the counter only needs
        ld      A,      [HL+]           ;  to be 8-bit)
        ld      [HL-],  A               ;
        dec     HL                      ;
        dec     C                       ; decrement counter
        jr      nz,     -               ; keep going until zero
        ;-----------------------------------------------------------------------
        ; add the move:
        ;
        ld      HL,     undo_src        ; switch to `undo_src` field, top entry
        ld      A,      [tmp_src]
        ld      [HL],   A
        inc     H                       ; switch to `undo_dst` field
        ld      A,      [tmp_dst]
        ld      [HL],   A
        inc     H                       ; switch to `undo_idx` field
        ld      A,      [tmp_idx]
        ld      [HL],   A

        pop     HL                      ; restore HL
        ret


chain:
;===============================================================================
; links the previous undo move to the next one so that they undo together:
;
; out:  AF      (clobbered)
;-------------------------------------------------------------------------------
        ; if undo is surpressed, do nothing:
        ;
        ld      A,      [disabled]      ; check undo-disabled flag
        and     A                       ; (set flags!)
        ret     nz                      ; exit if flag is non-zero

        ; set the hi-bit on the undo move source index
        ; (indicates a chain of moves)
        ;-----------------------------------------------------------------------
        ld      A,      [undo_src]
        set     7,      A
        ld      [undo_src],     A

        ret


isChained:
;===============================================================================
; is the current move atop the undo buffer chained?
;
; out:  z       zero-flag is CLEAR (`nz`) if move is chained
;       *       (preserved)
;-------------------------------------------------------------------------------
        push    HL

        ld      HL,     undo_src
        bit     7,      [HL]

        pop     HL
        ret


pop:
;===============================================================================
; pops a move from the undo buffer:
;
; this doesn't move any cards (see "tableau.wla" instead),
; only returns the data and shifts the buffer up
;
; out:  carry   clear = OK, set = buffer is empty
;       L       source pile index
;       E       destination pile index
;       A       card index in source pile
;       D       bit 7 is set if this move is chained with the next
;       BC      (preserved)
;       H       (clobbered)
;-------------------------------------------------------------------------------
        ; if undo is surpressed, do nothing:
        ; (returns as if empty)
        ;
        ld      A,      [disabled]      ; check undo-disabled flag
        sla     A                       ; shift bit 7 into carry and check zero
        ret     nz                      ; exit carry set if flag was non-zero

        ld      D,      A               ; A is zero so clear chain flag now

        ; is the buffer empty?
        ;
        ld      A,      [undo_src]      ; check undo source index
        and     A,      A               ; (set flags; clears carry!)
        scf                             ; return carry-set by default
        ret     z                       ; return if source index = 0 (empty)

        ; read the undo data:
        ;-----------------------------------------------------------------------
        ld      HL,     undo_dst
        ld      E,      [HL]
        ld      H,      >undo_idx
        ld      A,      [HL]
        ld      H,      >undo_src
        ld      L,      [HL]

        ; move the chain flag into D:
        sla     L                       ; take bit-7 from source index
        rr      D                       ; shift carry into D, clear carry
        rr      L                       ; fix source index

        ; backup the result:
        push    AF
        push    DE
        push    HL

        ; shift the buffer up:
        ;-----------------------------------------------------------------------
        ld      HL,     SECTIONSTART_undo.UndoBuff+1
        ld      D,      0               ; loop counter, 256 (underflows first)
        jr      +                       ; do one less byte (bottom-most!)
        ;-----------------------------------------------------------------------
-       ld      A,      [HL-]           ; read 2nd byte & move up to first
        ld      [HL+],  A               ; write to 1st byte and move back
        inc     HL                      ;  twice to make 2nd byte into first
+       ld      A,      [HL-]           ;
        ld      [HL+],  A               ; (this is repeated three times
        inc     HL                      ;  so that the counter only needs
        ld      A,      [HL-]           ;  to be 8-bit)
        ld      [HL+],  A               ;
        inc     HL                      ;
        dec     D                       ; decrement counter
        jr      nz,     -               ; keep going until zero
        ;-----------------------------------------------------------------------
        ; clear the bottom-most entry:
        ;
        ; TODO: warning! this may leave an incomplete chain at the bottom
        ;       of the undo buffer! we should remove all entries at the
        ;       bottom that are chained together
        ;
        ld      HL,     SECTIONEND_undo.UndoBuff-1
        ld      [HL],   0
        dec     H
        ld      [HL],   0
        dec     H
        ld      [HL],   0

        pop     HL                      ; return source pile index 
        pop     DE                      ; return dest. pile index & chain flag
        pop     AF                      ; return card index
        ret                             ; return carry clear = OK